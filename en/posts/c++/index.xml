<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Hmily云笔记</title>
    <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Hmily云笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>xinqinew@163.com (辛琪)</managingEditor>
    <webMaster>xinqinew@163.com (辛琪)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 08 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://xinqinew.github.io/en/posts/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>流程图 - 循环</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E6%B5%81%E7%A8%8B%E5%9B%BE-%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Sun, 16 Jan 2022 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E6%B5%81%E7%A8%8B%E5%9B%BE-%E5%BE%AA%E7%8E%AF/</guid>
      <description>for、while、do while三种循环的流程图画法总结（附案例） 循环结构是指在程序中需要反复执行某个功能而设置的一种程序结构，可以看成是</description>
    </item>
    
    <item>
      <title>ini文件读写</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/ini%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/</link>
      <pubDate>Thu, 13 Jan 2022 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/ini%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/</guid>
      <description>读取整型值 (返回值为从ini配置中读到的整数) 1 2 3 4 5 6 UINT GetPrivateProfileInt( LPCTSTR lpAppName, // INI文件中的一个字段名[节名]可以有很多个节名 LPCTSTR lpKeyName, // lpAppName 下的一个键名，也</description>
    </item>
    
    <item>
      <title>多线程</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Tue, 11 Jan 2022 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <description>CreateThread 1 m_AcountManageThread = CreateThread(NULL, NULL, ThreadProc, this, 0, NULL);//创建线程 AfxBeginThread (MFC专用) 1 2 //创建线程 大漠的DMInitThread AfxBeginThread(DMInitThread, this, THREAD_PRIORITY_NORMAL, 0, 0, NULL); _beginthreadex 1 m_hThreadHandle = (HANDLE)::_beginthreadex(NULL, 0, ThreadFunction, this, 0, &amp;amp;m_uThreadID); //</description>
    </item>
    
    <item>
      <title>C&#43;&#43; static静态成员变量</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/c&#43;&#43;-static%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F/</link>
      <pubDate>Sat, 08 Jan 2022 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/c&#43;&#43;-static%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F/</guid>
      <description>对象的内存中包含了成员变量，不同的对象占用不同的内存，这使得不同对象的成员变量相互独立，它们的值不受其他对象的影响。例如有两个相同类型的对象</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 计算程序运行的时间</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/c&#43;&#43;-%E8%AE%A1%E7%AE%97%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%97%B6%E9%97%B4/</link>
      <pubDate>Sat, 08 Jan 2022 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/c&#43;&#43;-%E8%AE%A1%E7%AE%97%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E7%9A%84%E6%97%B6%E9%97%B4/</guid>
      <description>C / C++ 计算程序运行的时间 在学数据结构过程中老师让查看不同算法的运行时间，然后让自己打印运行时间。 想要获取运行时间，计时函数是clock()，</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 实现HTTP GET和POST</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/c&#43;&#43;-%E5%AE%9E%E7%8E%B0http-get%E5%92%8Cpost/</link>
      <pubDate>Sat, 08 Jan 2022 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/c&#43;&#43;-%E5%AE%9E%E7%8E%B0http-get%E5%92%8Cpost/</guid>
      <description>C++ 一个简单的实现HTTP GET和POST请求的类 最近有个项目需要用到HTTP GET和POST请求，但是网上没有找到特别好用的类，就自己写了一</description>
    </item>
    
    <item>
      <title>C&#43;&#43;知识点(三)</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/c&#43;&#43;%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%89/</link>
      <pubDate>Sat, 08 Jan 2022 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/c&#43;&#43;%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%89/</guid>
      <description>函数 bzero()函数 bzero() 会将内存块（字符串）的前n个字节清零;在网络编程中会经常用到; 1 2 3 4 5 #include &amp;lt;string.h&amp;gt; void bzero( void *s, //s为内存（字符串）指针 int n //n</description>
    </item>
    
    <item>
      <title>json读写</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/json%E8%AF%BB%E5%86%99/</link>
      <pubDate>Sat, 08 Jan 2022 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/json%E8%AF%BB%E5%86%99/</guid>
      <description>GitHub开源 https://github.com/Nomango/configor configor 一个为 C++11 量身打造的轻量级 config 库，轻松完成 JSON 解析和序列化功能，并和 C++ 输入输出流交互。 功能 仅头文件，低接入成本 STL-like</description>
    </item>
    
    <item>
      <title>std::array容器用法</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/stdarray%E5%AE%B9%E5%99%A8%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sat, 08 Jan 2022 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/stdarray%E5%AE%B9%E5%99%A8%E7%94%A8%E6%B3%95/</guid>
      <description>C++ array(STL array)容器用法详解 http://c.biancheng.net/view/6688.html 引用 在使用该容器之前，代码中需引入 &amp;lt;array&amp;gt; 头文件，并默认使用 std 命令空间，如下所示： 1 2 #include &amp;lt;array&amp;gt; using namespace std; 创建 array 容器的方式 创建</description>
    </item>
    
    <item>
      <title>std::map用法</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/stdmap%E5%AE%B9%E5%99%A8%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sat, 08 Jan 2022 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/stdmap%E5%AE%B9%E5%99%A8%E7%94%A8%E6%B3%95/</guid>
      <description>更详细的教程 https://www.nhooo.com/cpp/cpp-map.html 本篇將介紹如何使用 C++ std map 以及用法，C++ std::map 是一個關聯式容器，關聯式容器把鍵值和一個元素連繫起來，並使用該鍵值來尋找元素、插入元</description>
    </item>
    
    <item>
      <title>stl 多线程</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/stl-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Sat, 08 Jan 2022 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/stl-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <description>一、高级接口 多线程启动函数std::async() async()的作用在于将其获取到的函数立即在一个新的线程内进行异步启动。也就是一个线程启</description>
    </item>
    
    <item>
      <title>VSCode搭建C&#43;&#43;开发环境Mac</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/vscode%E6%90%AD%E5%BB%BAc&#43;&#43;%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83mac/</link>
      <pubDate>Sat, 08 Jan 2022 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/vscode%E6%90%AD%E5%BB%BAc&#43;&#43;%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83mac/</guid>
      <description>VS Code 搭建 C++ 开发环境（Mac 环境） 准备 搭建之前需要先安装 clang，在 Mac 上有两种方法进行 clang 的安装： 在 AppStore 上安装 Xcode，clang 会在 Xcode 安装时</description>
    </item>
    
    <item>
      <title>遍历文件</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E9%81%8D%E5%8E%86%E6%96%87%E4%BB%B6/</link>
      <pubDate>Sat, 08 Jan 2022 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E9%81%8D%E5%8E%86%E6%96%87%E4%BB%B6/</guid>
      <description>遍历文件夹下的文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;io.h&amp;gt; #include &amp;lt;string&amp;gt; int main() { //目标文件夹路径 std::string inPath = &amp;#34;C:\\Program Files\\*&amp;#34;</description>
    </item>
    
    <item>
      <title>常见问题</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 08 Jan 2022 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</guid>
      <description>error C4996 注意：在图上标记的地方输入/D&amp;quot; ***** &amp;quot; 其中****所代表的内容是你编译后调试信息中提示的 use _CRT_SECURE_NO_WARNINGS 。 提示use什么就填入什么。</description>
    </item>
    
    <item>
      <title>CString指南</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/cstring%E6%8C%87%E5%8D%97/</link>
      <pubDate>Mon, 03 Jan 2022 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/cstring%E6%8C%87%E5%8D%97/</guid>
      <description>我用#CSDN#这个app发现了有技术含量的博客，小伙伴们求同去《CString 应用操作指南【转】》, 一起来围观吧 https://blog.csdn.net/wallwind/article/details/6599125?utm_source=app&amp;app_version=4.21.1 这篇文章包括以下内容： CString</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 调用cmd的几种方法</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/c&#43;&#43;-%E8%B0%83%E7%94%A8cmd%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</link>
      <pubDate>Tue, 21 Dec 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/c&#43;&#43;-%E8%B0%83%E7%94%A8cmd%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</guid>
      <description>调用cmd来执行响应的命令，windows实际上也给了一些接口，但是有些在执行某些命令的时候，却不能够执行，比如 winsat。 system 这个命令使用</description>
    </item>
    
    <item>
      <title>非常用API函数</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E9%9D%9E%E5%B8%B8%E7%94%A8api%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 17 Dec 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E9%9D%9E%E5%B8%B8%E7%94%A8api%E5%87%BD%E6%95%B0/</guid>
      <description>PROCESSENTRY32 存放快照进程信息的结构体 头文件 #include&amp;quot;tlhelp32.h&amp;quot; CreateToolhelp32Snapshot函数 获取系统中正在运行的进程信息，线程信息等。 详细内容见此</description>
    </item>
    
    <item>
      <title>内存中的浮点数与CE扫四种编码</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E6%B5%AE%E7%82%B9%E6%95%B0%E4%B8%8Ece%E6%89%AB%E5%9B%9B%E7%A7%8D%E7%BC%96%E7%A0%81/</link>
      <pubDate>Mon, 27 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E6%B5%AE%E7%82%B9%E6%95%B0%E4%B8%8Ece%E6%89%AB%E5%9B%9B%E7%A7%8D%E7%BC%96%E7%A0%81/</guid>
      <description>内存中的浮点数 3开头 1.xxxx 0.xxxx 4开头 100.xxxx b开头 -0.xxxx c开头 -15.xxxx CE扫四种编码 ASCI UNIDCOE（不勾选） UNIDCOE UNIDCOE 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 graph 勾选UNIDC</description>
    </item>
    
    <item>
      <title>在c&#43;&#43;使用and替代&amp;&amp;</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E5%9C%A8c&#43;&#43;%E4%BD%BF%E7%94%A8and%E6%9B%BF%E4%BB%A3/</link>
      <pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E5%9C%A8c&#43;&#43;%E4%BD%BF%E7%94%A8and%E6%9B%BF%E4%BB%A3/</guid>
      <description>在c++使用and替代&amp;amp;&amp;amp; 背景 ​ 在之前的一个项目中发现使用了 and 替代 &amp;amp;&amp;amp;，当时感觉很奇怪，c++有这样的用法吗</description>
    </item>
    
    <item>
      <title>输出您电脑上各种数据类型的大小</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E8%BE%93%E5%87%BA%E6%82%A8%E7%94%B5%E8%84%91%E4%B8%8A%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%A4%A7%E5%B0%8F/</link>
      <pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E8%BE%93%E5%87%BA%E6%82%A8%E7%94%B5%E8%84%91%E4%B8%8A%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%A4%A7%E5%B0%8F/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 #include&amp;lt;iostream&amp;gt; #include &amp;lt;limits&amp;gt; using namespace std; int main() { cout &amp;lt;&amp;lt; &amp;#34;type: \t\t&amp;#34; &amp;lt;&amp;lt; &amp;#34;************size**************&amp;#34;&amp;lt;&amp;lt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;非官方教程</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/c&#43;&#43;%E9%9D%9E%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B/</link>
      <pubDate>Sun, 08 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/c&#43;&#43;%E9%9D%9E%E5%AE%98%E6%96%B9%E6%95%99%E7%A8%8B/</guid>
      <description>runoob C++教程 语言中文网C++教程</description>
    </item>
    
    <item>
      <title>L和_T()的区别</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/l%E5%92%8C_t%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sun, 08 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/l%E5%92%8C_t%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>一、L&amp;quot;str&amp;quot; 如 L&amp;quot;我的字符串&amp;quot; 表示将ANSI字符串转换成unicode的字符串，就是每个字符占用</description>
    </item>
    
    <item>
      <title>pragma once与ifndef 解析</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/pragma-once%E4%B8%8Eifndef%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Sun, 08 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/pragma-once%E4%B8%8Eifndef%E8%A7%A3%E6%9E%90/</guid>
      <description>#pragma once 与 #ifndef 解析 为了避免同一个文件被include多次，C/C++中有两种方式，一种是#ifndef方式，一种是#pragma once方式。在能</description>
    </item>
    
    <item>
      <title>C&#43;&#43;知识点(二)</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/c&#43;&#43;%E7%9F%A5%E8%AF%86%E7%82%B9%E4%BA%8C/</link>
      <pubDate>Sat, 07 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/c&#43;&#43;%E7%9F%A5%E8%AF%86%E7%82%B9%E4%BA%8C/</guid>
      <description>C++类与对象 CEdit类 为Edit控件关联变量 CString类 CString 成员函数用法 // CStringA，CStringW CString::GetBuffer //获取字符串地址 cha</description>
    </item>
    
    <item>
      <title>C&#43;&#43;关键字</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <description>C++关键字 1. asm asm (指令字符串)：允许在 C++ 程序中嵌入汇编代码。 2. auto auto（自动，automatic）是存储类型标识符，表明变量&amp;quot;</description>
    </item>
    
    <item>
      <title>指针读写内存</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E6%8C%87%E9%92%88%E8%AF%BB%E5%86%99%E5%86%85%E5%AD%98/</link>
      <pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E6%8C%87%E9%92%88%E8%AF%BB%E5%86%99%E5%86%85%E5%AD%98/</guid>
      <description>指针读写内存 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 #include &amp;lt;cstdio&amp;gt; #define BASE 0x00417000 int</description>
    </item>
    
    <item>
      <title>字符的输入与输出</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E5%AD%97%E7%AC%A6%E7%9A%84%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/</link>
      <pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E5%AD%97%E7%AC%A6%E7%9A%84%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/</guid>
      <description>字符的输入与输出 \b 退格 \f 走纸换页 \r 回车 \t 横向跳格(ctrl-i) 格式化字符 %c 字符 %d 十进制整数 %s 字符串 %S or %ws 宽字符串 %x 十六进制整数 %p 指针或地址</description>
    </item>
    
    <item>
      <title>C&#43;&#43;知识点(一)</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/c&#43;&#43;%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%80/</link>
      <pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/c&#43;&#43;%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%80/</guid>
      <description>C++知识点（一） L&amp;quot;&amp;ldquo;替换成_T(&amp;rdquo;&amp;quot;) 使用正则表达式 1 2 查找 L(\&amp;#34;.+?\&amp;#34;) 替换成 _T($1) 阻断函数 1 2 getchar() //等待</description>
    </item>
    
    <item>
      <title>&lt;&gt;尖括号</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E5%B0%96%E6%8B%AC%E5%8F%B7/</link>
      <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E5%B0%96%E6%8B%AC%E5%8F%B7/</guid>
      <description>&amp;lt; &amp;gt;尖括号 我习惯将尖括号用于指定类型，作为参数: 1 vector&amp;lt;int&amp;gt; vecOfInts ; 但是在rapidjson中，有这样的代码: 1 document.Parse&amp;lt;0&amp;gt;(json) ; document.Parse方</description>
    </item>
    
    <item>
      <title>ifndef详解</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/ifndef%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/ifndef%E8%AF%A6%E8%A7%A3/</guid>
      <description>ifndef详解 ifndef是&amp;quot;if not defined&amp;quot;的简写 #ifndef起到的效果是防止一个源文件多次包含同一个头文件</description>
    </item>
    
    <item>
      <title>typedef起小名</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/typedef%E8%B5%B7%E5%B0%8F%E5%90%8D/</link>
      <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/typedef%E8%B5%B7%E5%B0%8F%E5%90%8D/</guid>
      <description>typedef起小名 C 语言提供了 typedef 关键字，您可以使用它来为类型取一个新的名字。下面的实例为单字节数字定义了一个术语 BYTE： 1 typedef unsigned char BYTE; 在这个</description>
    </item>
    
    <item>
      <title>常用头文件</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E5%B8%B8%E7%94%A8%E5%A4%B4%E6%96%87%E4%BB%B6/</link>
      <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E5%B8%B8%E7%94%A8%E5%A4%B4%E6%96%87%E4%BB%B6/</guid>
      <description>常用头文件 stdafx.h MFC预编译(旧版) pch.h MFC预编译(新版) stdio.h 输入输出 process.h 进程 stdlib.h 声明了数值与字符串转换函数, 伪随机数 生成函数, 动态内存分配函数, 进程</description>
    </item>
    
    <item>
      <title>十六进制数高位和低位的结合与分离</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E6%95%B0%E9%AB%98%E4%BD%8D%E5%92%8C%E4%BD%8E%E4%BD%8D%E7%9A%84%E7%BB%93%E5%90%88%E4%B8%8E%E5%88%86%E7%A6%BB/</link>
      <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E6%95%B0%E9%AB%98%E4%BD%8D%E5%92%8C%E4%BD%8E%E4%BD%8D%E7%9A%84%E7%BB%93%E5%90%88%E4%B8%8E%E5%88%86%E7%A6%BB/</guid>
      <description>今天在调试一个测温模块的时候遇到十六进制的高位和低位组合，板子通过串口发送指令给模块，并读取模块返回的温度值，但是模块返回的是一个十六进制的</description>
    </item>
    
    <item>
      <title>cin和cout输入输出</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/</link>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/</guid>
      <description>TRACE 调试输出 1 TRACE(_T(&amp;#34;大漠版本号:%s\n&amp;#34;),dm-&amp;gt;Ver()); cin和cout输入输出 适用于控制台 简</description>
    </item>
    
    <item>
      <title>class 类</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/class%E7%B1%BB/</link>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/class%E7%B1%BB/</guid>
      <description>class 类 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include &amp;lt;stdio.h&amp;gt; //通过class关键字类定义类 class Student{ public: //类包含的变量 char *name; int age; float score; //类包含的函数 void</description>
    </item>
    
    <item>
      <title>namespace 命名空间</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/namespace%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</link>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/namespace%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</guid>
      <description>namespace 命名空间 namespace 是C++中的关键字，用来定义一个命名空间，语法格式为： 1 2 3 namespace name{ //variables, functions, classes } name是命名空间的名字，它里面可以包含变量、函数、类、</description>
    </item>
    
    <item>
      <title>printf输出</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/printf%E8%BE%93%E5%87%BA/</link>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/printf%E8%BE%93%E5%87%BA/</guid>
      <description>printf输出 函式原型： int printf ( const char * format, &amp;hellip; ); 引數說明： %[flags][width][.precision][length]specifier %[旗標][寬度][.精度][長度修飾]資料型態 1. 資料型態 ( %[旗標][寬度][.精</description>
    </item>
    
    <item>
      <title>std命名空间</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/std%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</link>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/std%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</guid>
      <description>std命名空间 使用命名空间 std： 1 2 3 4 5 #include &amp;lt;cstdio&amp;gt; int main(){ std::printf(&amp;#34;http://c.biancheng.net\n&amp;#34;); return 0; } 不使用命名空间 std： 1 2 3 4 5 #include &amp;lt;cstdio&amp;gt; int main(){ printf(&amp;#34;http://c.biancheng.net\n&amp;#34;); return 0; } 演示了如何使用 C++ 库进行输入输出：</description>
    </item>
    
    <item>
      <title>struct 结构体</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/struct%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/struct%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>struct 结构体 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #include &amp;lt;stdio.h&amp;gt; //定义结构体 Student struct Student{ //结构体包含的成员变量 char *name; int age; float score; }; //显示结构体的成员</description>
    </item>
    
    <item>
      <title>常用API函数</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E5%B8%B8%E7%94%A8api%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;/%E5%B8%B8%E7%94%A8api%E5%87%BD%E6%95%B0/</guid>
      <description>常用API函数 模拟鼠标 1 LRESULT SendMessage(HWND hWnd，UINT Msg，WPARAM wParam，LPARAM IParam); 其中Msg可以为WM_LBUTTONDOWN或</description>
    </item>
    
  </channel>
</rss>
