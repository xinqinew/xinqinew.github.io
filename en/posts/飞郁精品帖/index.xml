<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>飞郁精品贴 on Hmily云笔记</title>
    <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/</link>
    <description>Recent content in 飞郁精品贴 on Hmily云笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>xinqinew@163.com (辛琪)</managingEditor>
    <webMaster>xinqinew@163.com (辛琪)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 01 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>FPS骨骼,u3d,UE4(二)</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/fps%E9%AA%A8%E9%AA%BCu3due4%E4%BA%8C/</link>
      <pubDate>Sat, 08 Jan 2022 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/fps%E9%AA%A8%E9%AA%BCu3due4%E4%BA%8C/</guid>
      <description>我们接着上文继续,如果没有看上文基础的同学建议先看完上文再继续本文章 本文章中均以单机游戏为例,每一种功能仅提供给网络安全工作者反外挂建议和安</description>
    </item>
    
    <item>
      <title>FPS游戏绘制(一)</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/fps%E6%B8%B8%E6%88%8F%E7%BB%98%E5%88%B6%E4%B8%80/</link>
      <pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/fps%E6%B8%B8%E6%88%8F%E7%BB%98%E5%88%B6%E4%B8%80/</guid>
      <description>FPS类型游戏的设计研究和游戏安全,反外挂研究 学习这套课程的基础包含少量的汇编知识和编程知识, 一定的数学知识和内存知识 基础建立在 任鸟飞202</description>
    </item>
    
    <item>
      <title>【飞郁2022新课程】32 - xdbg的认识与设置</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B32-xdbg%E7%9A%84%E8%AE%A4%E8%AF%86%E4%B8%8E%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Fri, 24 Dec 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B32-xdbg%E7%9A%84%E8%AE%A4%E8%AF%86%E4%B8%8E%E8%AE%BE%E7%BD%AE/</guid>
      <description>xdbg的简介 Xllydbg(简称xdbg)和OD的用法和界面都是很像的,由于网络安全的发展,OD无法满足大部分人的需要了,更多的人习惯对x</description>
    </item>
    
    <item>
      <title>【飞郁2022新课程】31 - OD更多技巧</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B31-od%E6%9B%B4%E5%A4%9A%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Thu, 23 Dec 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B31-od%E6%9B%B4%E5%A4%9A%E6%8A%80%E5%B7%A7/</guid>
      <description>上一节课,给大家介绍OD的一些基本的使用方法,当然OD不仅仅只有这些功能和指令,这节课咱们就来更深入的了解一下OD 对命令行插件进行操作 首先我</description>
    </item>
    
    <item>
      <title>【飞郁2022新课程】23 - CE找偏移表达式</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B23-ce%E6%89%BE%E5%81%8F%E7%A7%BB%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B23-ce%E6%89%BE%E5%81%8F%E7%A7%BB%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>基地址和动态地址是一对好基友,他们相隔十万八千里,却紧密联系着 他们不用像唐僧取经一样翻山越岭,经历九九八十一难,因为他们有一种如同月光宝盒一</description>
    </item>
    
    <item>
      <title>【飞郁2022新课程】21 - 基地址和动态地址</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B21-%E5%9F%BA%E5%9C%B0%E5%9D%80%E5%92%8C%E5%8A%A8%E6%80%81%E5%9C%B0%E5%9D%80/</link>
      <pubDate>Sun, 19 Dec 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B21-%E5%9F%BA%E5%9C%B0%E5%9D%80%E5%92%8C%E5%8A%A8%E6%80%81%E5%9C%B0%E5%9D%80/</guid>
      <description>基地址 每一次程序启动,内存都会重新分配,我们在CE中扫描的地址大多会发生改变,但也有一些是不会随着游戏重启而变化的,这里面就有一部分是基地址</description>
    </item>
    
    <item>
      <title>【飞郁2022新课程】20 - 局部变量和全局变量</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B20-%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%92%8C%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/</link>
      <pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B20-%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%92%8C%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/</guid>
      <description>[在前面的课中 我们讲了常量和变量 这里我们讲下变量的作用域 和 局部变量 全局变量 全局静态变量 局部静态变量 在讲到这些之前 还需要了解下程序的内存分配问</description>
    </item>
    
    <item>
      <title>Hook</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/hook/</link>
      <pubDate>Mon, 06 Dec 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/hook/</guid>
      <description>常用hook方式 JMP指令型hook RET指令型hook Detours库hook JMP与CALL 公式 目标地址 = 当前指令地址 +指令长度 + 偏移量</description>
    </item>
    
    <item>
      <title>MFC控件</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/mfc%E6%8E%A7%E4%BB%B6/</link>
      <pubDate>Sun, 05 Dec 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/mfc%E6%8E%A7%E4%BB%B6/</guid>
      <description>GetDlgItem 获取控件对象 根据继承关系，有如下几类： 1 2 3 4 5 6 7 CWindow::GetDlgItem HWND GetDlgItem( intnID)const; /* 说明—— 参数 nID：接收消息的控件的标识； 返回值：标识所标记的控制窗口句柄 */</description>
    </item>
    
    <item>
      <title>【飞郁2022新课程】19 - 操作符运算符</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B19-%E6%93%8D%E4%BD%9C%E7%AC%A6%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B19-%E6%93%8D%E4%BD%9C%E7%AC%A6%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>学生：上节课骷髅老师搜索数据搜索太快了，我还没看清楚呢，他就扫完了，拦都拦不住他啊！ 老师：我都拦不住他呀，他是早产儿。 学生：这和早产儿有啥关</description>
    </item>
    
    <item>
      <title>【飞郁2022新课程】18 - CE基础和扫描</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B18-ce%E5%9F%BA%E7%A1%80%E5%92%8C%E6%89%AB%E6%8F%8F/</link>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B18-ce%E5%9F%BA%E7%A1%80%E5%92%8C%E6%89%AB%E6%8F%8F/</guid>
      <description>1.打开CE Cheat Engine是网络安全数据分析的一款很重要的工具,我们可以在官网下载他的最新版本https://www.cheatengine</description>
    </item>
    
    <item>
      <title>【飞郁2022新课程】17 - 操作符运算符</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B17-%E6%93%8D%E4%BD%9C%E7%AC%A6%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B17-%E6%93%8D%E4%BD%9C%E7%AC%A6%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>不知道有没有同学发现之前几节都是在讲关于数据 那么有的同学会问 计算机是怎么处理操作运算这些数据的呢？ 好的 这节课就讲解C语言运算符 一、运算符 1.</description>
    </item>
    
    <item>
      <title>飞郁2019课程目录</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812019%E8%AF%BE%E7%A8%8B%E7%9B%AE%E5%BD%95/</link>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812019%E8%AF%BE%E7%A8%8B%E7%9B%AE%E5%BD%95/</guid>
      <description>骷髅 跨进程读写内存 2019年10月18日——跨进程读写内存 2019年10月21日——窗口相关的API，字符集，常用类型 2019年11月4日—</description>
    </item>
    
    <item>
      <title>【飞郁2022新课程】16 - 数组和字符串</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B16-%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Mon, 29 Nov 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B16-%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>前面讲到了数据类型讲到过字符数组 有的同学对 数组 还不太理解 那么今天我们讲解的是 数组 和 字符串以及一些编码 好了 开始我们的讲解 一、数组 首先我们讲解数</description>
    </item>
    
    <item>
      <title>【飞郁2022新课程】15 - 强制转换类型</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B15-%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Fri, 26 Nov 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B15-%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2%E7%B1%BB%E5%9E%8B/</guid>
      <description>一、强制转换类型 1.从名字上来理解关键在于类型转换中“转换“二字的理解 2.想必大家也能理解 其实就是 一种类型转换为另一种类型 3.类型转换分为:</description>
    </item>
    
    <item>
      <title>【飞郁2022新课程】14 - 有符号和无符号区别</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B14-%E6%9C%89%E7%AC%A6%E5%8F%B7%E5%92%8C%E6%97%A0%E7%AC%A6%E5%8F%B7%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B14-%E6%9C%89%E7%AC%A6%E5%8F%B7%E5%92%8C%E6%97%A0%E7%AC%A6%E5%8F%B7%E5%8C%BA%E5%88%AB/</guid>
      <description>一、原码 反码 补码 从不同的角度去看情况,往往会得到不同的结果,在前面的课程我们举得例子都是正数,没有看到负数,难道计算机没有负数一说？当然不是</description>
    </item>
    
    <item>
      <title>【飞郁2022新课程】13 - 浮点数内存中的储存方式</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B13-%E6%B5%AE%E7%82%B9%E6%95%B0%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%82%A8%E5%AD%98%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Tue, 23 Nov 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B13-%E6%B5%AE%E7%82%B9%E6%95%B0%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%82%A8%E5%AD%98%E6%96%B9%E5%BC%8F/</guid>
      <description>一个小数,无论是单精度的float型还是双精度的double型,在内存中都会储存为三个部分,即符号位,指数位,尾数 符号位就是小数的正负,0代</description>
    </item>
    
    <item>
      <title>【飞郁2022新课程】12 - 整数内存中的储存方式</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B12-%E6%95%B4%E6%95%B0%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%82%A8%E5%AD%98%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B12-%E6%95%B4%E6%95%B0%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%82%A8%E5%AD%98%E6%96%B9%E5%BC%8F/</guid>
      <description>还记得之前的课程，变量在内存中，看到是反着排列的吗？ 当时我们没有深究这个问题 但是我们现在学习内存了，就有疑惑了 为什么 4字节数据是反着排列的呢</description>
    </item>
    
    <item>
      <title>【飞郁2022新课程】11 - 字符内存中的储存方式</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B11-%E5%AD%97%E7%AC%A6%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%82%A8%E5%AD%98%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Sun, 21 Nov 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B11-%E5%AD%97%E7%AC%A6%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%82%A8%E5%AD%98%E6%96%B9%E5%BC%8F/</guid>
      <description>不同的数据在内存中的存放方式是不同的 我们说内存中每一位只存放了0和1，用来表示整数很容易，那怎么表示小数怎么表示？文字符号呢？这就需要不同的</description>
    </item>
    
    <item>
      <title>【飞郁2022新课程】10 - 内存</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B10-%E5%86%85%E5%AD%98/</link>
      <pubDate>Thu, 18 Nov 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B10-%E5%86%85%E5%AD%98/</guid>
      <description>什么是内存 内存是计算机中重要的部件之一。计算机中所有程序的运行都要在内存中进行。其作用是用于暂时存放cpu中的运算数据。 我们调试软件时所说的</description>
    </item>
    
    <item>
      <title>【飞郁2022新课程】08 - 输入输出流</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B08-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81/</link>
      <pubDate>Wed, 17 Nov 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B08-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81/</guid>
      <description>在上一节课中咱们的代码中涉及到了printf()函数以及一些参数的设置 这里肯定有很多同学不知道怎么使用这个函数 那么，今天咱们的主题就是 输入和</description>
    </item>
    
    <item>
      <title>【飞郁2022新课程】09 - 常量和变量</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B09-%E5%B8%B8%E9%87%8F%E5%92%8C%E5%8F%98%E9%87%8F/</link>
      <pubDate>Wed, 17 Nov 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B09-%E5%B8%B8%E9%87%8F%E5%92%8C%E5%8F%98%E9%87%8F/</guid>
      <description>相信大家在上一节课的代码中看到过很多 变量的定义和声明 1 2 3 4 5 6 7 8 9 int a=1; bool b=TRUE; char c=&amp;#39;h&amp;#39;; float f=1.0f; double d=2.0f; 等等 这些代码 不明白这是干什么的 其实这就是在申请一个</description>
    </item>
    
    <item>
      <title>【飞郁2022新课程】03 - 计算机底层的二进制</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B03-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6/</link>
      <pubDate>Fri, 12 Nov 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B03-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6/</guid>
      <description>【飞郁2022新课程】03 - 计算机底层的二进制 飞郁网络 听说你们学编程不想学基础? 说实话,我还不想教呢! 基础理论乏味的很,哼!凸显不出我高深的</description>
    </item>
    
    <item>
      <title>【飞郁2022新课程】04 - 十六进制</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B04-%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6/</link>
      <pubDate>Fri, 12 Nov 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B04-%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6/</guid>
      <description>同学同学,你怎么..不开心? 进制太烦了,我算的乱七八糟 来来来,听完我这节课,你还是不说不懂的话,我不保证不打死你???&amp;hellip; 拓展内</description>
    </item>
    
    <item>
      <title>【飞郁2022新课程】05 - 高级语言和低级语言</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B05-%E9%AB%98%E7%BA%A7%E8%AF%AD%E8%A8%80%E5%92%8C%E4%BD%8E%E7%BA%A7%E8%AF%AD%E8%A8%80/</link>
      <pubDate>Fri, 12 Nov 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B05-%E9%AB%98%E7%BA%A7%E8%AF%AD%E8%A8%80%E5%92%8C%E4%BD%8E%E7%BA%A7%E8%AF%AD%E8%A8%80/</guid>
      <description>学不同语言的同学，总要争个高低，其实完全没有必要，萝卜白菜各有所爱。 但是计算机语言还真是具有高级语言和低级语言之分的。不过此高非彼高。 正式学</description>
    </item>
    
    <item>
      <title>【飞郁2022新课程】06 - 创建第一个hello world项目及其简单介绍</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B06-%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AAhello-world%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%85%B6%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 12 Nov 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B06-%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AAhello-world%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%85%B6%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</guid>
      <description>【飞郁2022新课程】06 - 创建第一个hello world项目及其简单介绍 飞郁网络 之前有个朋友,老牛逼了,他和我说学了10种编程语言, 顿时崇</description>
    </item>
    
    <item>
      <title>【飞郁2022新课程】07 - 数据类型 和数据宽度</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B07-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E5%92%8C%E6%95%B0%E6%8D%AE%E5%AE%BD%E5%BA%A6/</link>
      <pubDate>Fri, 12 Nov 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B07-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E5%92%8C%E6%95%B0%E6%8D%AE%E5%AE%BD%E5%BA%A6/</guid>
      <description>一、数据宽度 首先在了解数据类型之前 我们要了解数据宽度 任何的数据类型都是有宽度的，宽度就是表示这种数据类型的数据占多大的空间。 数据宽度的两个基</description>
    </item>
    
    <item>
      <title>【飞郁2022新课程】02 - Visual Studio的安装和简单的项目创建</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B02-visual-studio%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E7%AE%80%E5%8D%95%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA/</link>
      <pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A3%9E%E9%83%812022%E6%96%B0%E8%AF%BE%E7%A8%8B02-visual-studio%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E7%AE%80%E5%8D%95%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA/</guid>
      <description>工欲善其事，必先利其器。 学习编程，学习网络空间安全,我们首先要认识的一款叫做Visual Studio的工具。 连写字都需要一张纸，代码也一样，</description>
    </item>
    
    <item>
      <title>32位游戏逆向安全之角色及怪物分析</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/32%E4%BD%8D%E6%B8%B8%E6%88%8F%E9%80%86%E5%90%91%E5%AE%89%E5%85%A8%E4%B9%8B%E8%A7%92%E8%89%B2%E5%8F%8A%E6%80%AA%E7%89%A9%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/32%E4%BD%8D%E6%B8%B8%E6%88%8F%E9%80%86%E5%90%91%E5%AE%89%E5%85%A8%E4%B9%8B%E8%A7%92%E8%89%B2%E5%8F%8A%E6%80%AA%E7%89%A9%E5%88%86%E6%9E%90/</guid>
      <description>32位游戏逆向安全之角色及怪物分析 角色对象作为一个特殊的个体，一般都是单独存放在一个基地址下的，而有些游戏则需要通过角色名字 或者ID到怪物遍</description>
    </item>
    
    <item>
      <title>64位数据扫描及工具介绍</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/64%E4%BD%8D%E6%95%B0%E6%8D%AE%E6%89%AB%E6%8F%8F%E5%8F%8A%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/64%E4%BD%8D%E6%95%B0%E6%8D%AE%E6%89%AB%E6%8F%8F%E5%8F%8A%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/</guid>
      <description>64位数据扫描及工具介绍 x64位程序的分析，主要用到两款工具，而这两款工具同x32位程序的分析工具类似，一款是CE，另一款则是xdbg64。</description>
    </item>
    
    <item>
      <title>MXD系列之技能分析技能点数结构</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/mxd%E7%B3%BB%E5%88%97%E4%B9%8B%E6%8A%80%E8%83%BD%E5%88%86%E6%9E%90%E6%8A%80%E8%83%BD%E7%82%B9%E6%95%B0%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/mxd%E7%B3%BB%E5%88%97%E4%B9%8B%E6%8A%80%E8%83%BD%E5%88%86%E6%9E%90%E6%8A%80%E8%83%BD%E7%82%B9%E6%95%B0%E7%BB%93%E6%9E%84/</guid>
      <description>MXD系列之技能分析技能点数结构 随着游戏代码的发展，新游戏的技能越来越华丽，分类也越来越多，数据结构用的五花八门。而老游戏也不甘寂寞，技能数</description>
    </item>
    
    <item>
      <title>XMD系列之技能真实名称遍历</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/xmd%E7%B3%BB%E5%88%97%E4%B9%8B%E6%8A%80%E8%83%BD%E7%9C%9F%E5%AE%9E%E5%90%8D%E7%A7%B0%E9%81%8D%E5%8E%86/</link>
      <pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/xmd%E7%B3%BB%E5%88%97%E4%B9%8B%E6%8A%80%E8%83%BD%E7%9C%9F%E5%AE%9E%E5%90%8D%E7%A7%B0%E9%81%8D%E5%8E%86/</guid>
      <description>XMD系列之技能真实名称遍历 上一篇文章里，我们对技能名字进行分析，得到了一个数组，但是经过观察，我们发现这个数组是一个临时存放的数组，只有当</description>
    </item>
    
    <item>
      <title>调试游戏.了解64位汇编指令（1）</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E8%B0%83%E8%AF%95%E6%B8%B8%E6%88%8F.%E4%BA%86%E8%A7%A364%E4%BD%8D%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A41/</link>
      <pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E8%B0%83%E8%AF%95%E6%B8%B8%E6%88%8F.%E4%BA%86%E8%A7%A364%E4%BD%8D%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A41/</guid>
      <description>调试游戏.了解64位汇编指令（1） 之前我们对64位的通用寄存器和一些常用的调试器功能有了初步的认识，下面我们来通过调试游戏，对64位的汇编指</description>
    </item>
    
    <item>
      <title>天刀x64明文收包及狩猎抢怪功能分析</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E5%A4%A9%E5%88%80x64%E6%98%8E%E6%96%87%E6%94%B6%E5%8C%85%E5%8F%8A%E7%8B%A9%E7%8C%8E%E6%8A%A2%E6%80%AA%E5%8A%9F%E8%83%BD%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 25 Oct 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E5%A4%A9%E5%88%80x64%E6%98%8E%E6%96%87%E6%94%B6%E5%8C%85%E5%8F%8A%E7%8B%A9%E7%8C%8E%E6%8A%A2%E6%80%AA%E5%8A%9F%E8%83%BD%E5%88%86%E6%9E%90/</guid>
      <description>天刀x64明文收包及狩猎抢怪功能分析 任鸟飞 任鸟飞逆向 8月7日 天涯明月刀》从首测开始已经经历了6年的时间，因为画风唯美，玩法多样，如今依然热度</description>
    </item>
    
    <item>
      <title>《冒险岛》技能分析之技能库</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E5%86%92%E9%99%A9%E5%B2%9B%E6%8A%80%E8%83%BD%E5%88%86%E6%9E%90%E4%B9%8B%E6%8A%80%E8%83%BD%E5%BA%93/</link>
      <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E5%86%92%E9%99%A9%E5%B2%9B%E6%8A%80%E8%83%BD%E5%88%86%E6%9E%90%E4%B9%8B%E6%8A%80%E8%83%BD%E5%BA%93/</guid>
      <description>上一篇帖子中我们对技能等级进行了分析，接下来我们对技能名字库进行分析，进而获得完整的技能遍历。既然分析名字库，自然要从名字入手了，我们任意选</description>
    </item>
    
    <item>
      <title>【安全系列】python exe文件解包方法总结</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97python-exe%E6%96%87%E4%BB%B6%E8%A7%A3%E5%8C%85%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97python-exe%E6%96%87%E4%BB%B6%E8%A7%A3%E5%8C%85%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</guid>
      <description>一、步骤1. exe → pyc方法1：pyinstxtractor.py 执行python pyinstxtractor.py &amp;lt;待解包文件名&amp;gt; ，如果成功，即可获得&amp;lt;待</description>
    </item>
    
    <item>
      <title>【代码系列】共享内存的应用与写法</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E4%BB%A3%E7%A0%81%E7%B3%BB%E5%88%97%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%9A%84%E5%BA%94%E7%94%A8%E4%B8%8E%E5%86%99%E6%B3%95/</link>
      <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E4%BB%A3%E7%A0%81%E7%B3%BB%E5%88%97%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%9A%84%E5%BA%94%E7%94%A8%E4%B8%8E%E5%86%99%E6%B3%95/</guid>
      <description>共享内存指 (shared memory)在多处理器的计算机系统中，可以被不同中央处理器(CPU)访问的大容量内存。由于多个CPU需要快速访问存储器，这样就</description>
    </item>
    
    <item>
      <title>【幻想神域】人物属性分析</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E5%B9%BB%E6%83%B3%E7%A5%9E%E5%9F%9F%E4%BA%BA%E7%89%A9%E5%B1%9E%E6%80%A7%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E5%B9%BB%E6%83%B3%E7%A5%9E%E5%9F%9F%E4%BA%BA%E7%89%A9%E5%B1%9E%E6%80%A7%E5%88%86%E6%9E%90/</guid>
      <description>首先对角色名字进行搜索，得到3个结果，分别改变3个结果后，切换角色栏，发现角色名字变为了第三个地址的名字**（如图）** 通过OD对这个地址下</description>
    </item>
    
    <item>
      <title>【冒险岛】技能等级遍历分析</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E5%86%92%E9%99%A9%E5%B2%9B%E6%8A%80%E8%83%BD%E7%AD%89%E7%BA%A7%E9%81%8D%E5%8E%86%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E5%86%92%E9%99%A9%E5%B2%9B%E6%8A%80%E8%83%BD%E7%AD%89%E7%BA%A7%E9%81%8D%E5%8E%86%E5%88%86%E6%9E%90/</guid>
      <description>随着游戏代码的发展，新游戏的技能越来越华丽，分类也越来越多，数据结构用的五花八门。而老游戏也不甘寂寞，技能数据也处理的有模有样，分析起来也颇</description>
    </item>
    
    <item>
      <title>【驱动系列】最简单的X64驱动</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A9%B1%E5%8A%A8%E7%B3%BB%E5%88%97%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84x64%E9%A9%B1%E5%8A%A8/</link>
      <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E9%A9%B1%E5%8A%A8%E7%B3%BB%E5%88%97%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84x64%E9%A9%B1%E5%8A%A8/</guid>
      <description>PE结构图: 在游戏外挂和反外挂的对抗中 驱动有其重要的作用 但是随着Windows 系统的升级 很多东西出现了局限性，不过我们还是需要了解学习一下 其</description>
    </item>
    
    <item>
      <title>【手游系列】《暴走雷龙战机》内购破解分析</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E6%89%8B%E6%B8%B8%E7%B3%BB%E5%88%97%E6%9A%B4%E8%B5%B0%E9%9B%B7%E9%BE%99%E6%88%98%E6%9C%BA%E5%86%85%E8%B4%AD%E7%A0%B4%E8%A7%A3%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E6%89%8B%E6%B8%B8%E7%B3%BB%E5%88%97%E6%9A%B4%E8%B5%B0%E9%9B%B7%E9%BE%99%E6%88%98%E6%9C%BA%E5%86%85%E8%B4%AD%E7%A0%B4%E8%A7%A3%E5%88%86%E6%9E%90/</guid>
      <description>大部分内购破解都是通过反编译软件对smali中的代码进行修改，首先通过android killer对apk进行分析，并通过模拟器对游戏进行安装</description>
    </item>
    
    <item>
      <title>64位内存与通用寄存器</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/64%E4%BD%8D%E5%86%85%E5%AD%98%E4%B8%8E%E9%80%9A%E7%94%A8%E5%AF%84%E5%AD%98%E5%99%A8/</link>
      <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/64%E4%BD%8D%E5%86%85%E5%AD%98%E4%B8%8E%E9%80%9A%E7%94%A8%E5%AF%84%E5%AD%98%E5%99%A8/</guid>
      <description>随着游戏行业的发展，x32位的程序已经很难满足一些新兴游戏的需求了，因为32位内存的最大值为0xFFFFFFFF，这个值看似足够，但是当游戏</description>
    </item>
    
    <item>
      <title>x86 和 x64 共用HOOK类</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/x86-%E5%92%8C-x64-%E5%85%B1%E7%94%A8hook%E7%B1%BB/</link>
      <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/x86-%E5%92%8C-x64-%E5%85%B1%E7%94%A8hook%E7%B1%BB/</guid>
      <description>InHook.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #pragma once #ifdef _WIN64 typedef unsigned __int64 SELF_PTR; #else typedef unsigned int SELF_PTR; #endif #if _WIN64 constexpr int byte_length = 9; #else constexpr int byte_length = 5; #endif // 0 class InHook { public: void Initalize(SELF_PTR oldAddr, SELF_PTR</description>
    </item>
    
    <item>
      <title>技能点数结构（冒险岛技能分析）</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E6%8A%80%E8%83%BD%E7%82%B9%E6%95%B0%E7%BB%93%E6%9E%84%E5%86%92%E9%99%A9%E5%B2%9B%E6%8A%80%E8%83%BD%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E6%8A%80%E8%83%BD%E7%82%B9%E6%95%B0%E7%BB%93%E6%9E%84%E5%86%92%E9%99%A9%E5%B2%9B%E6%8A%80%E8%83%BD%E5%88%86%E6%9E%90/</guid>
      <description>随着游戏代码的发展，新游戏的技能越来越华丽，分类也越来越多，数据结构用的五花八门。而老游戏也不甘寂寞，技能数据也处理的有模有样，分析起来也颇</description>
    </item>
    
    <item>
      <title>x64&lt;传奇永恒&gt;之释放技能CALL</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/x64%E4%BC%A0%E5%A5%87%E6%B0%B8%E6%81%92%E4%B9%8B%E9%87%8A%E6%94%BE%E6%8A%80%E8%83%BDcall/</link>
      <pubDate>Tue, 12 Oct 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/x64%E4%BC%A0%E5%A5%87%E6%B0%B8%E6%81%92%E4%B9%8B%E9%87%8A%E6%94%BE%E6%8A%80%E8%83%BDcall/</guid>
      <description>今天我们来分析一下&amp;lt;传奇永恒&amp;gt;的释放技能CALL, 调用技能CALL可以实现全自动循环打怪功能. 首先, 定位到明文包头部 在明文包头部</description>
    </item>
    
    <item>
      <title>跳出线程发包的几种方式（韩服剑灵2）</title>
      <link>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E8%B7%B3%E5%87%BA%E7%BA%BF%E7%A8%8B%E5%8F%91%E5%8C%85%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E9%9F%A9%E6%9C%8D%E5%89%91%E7%81%B52/</link>
      <pubDate>Tue, 12 Oct 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/%E9%A3%9E%E9%83%81%E7%B2%BE%E5%93%81%E5%B8%96/%E8%B7%B3%E5%87%BA%E7%BA%BF%E7%A8%8B%E5%8F%91%E5%8C%85%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E9%9F%A9%E6%9C%8D%E5%89%91%E7%81%B52/</guid>
      <description>明文发包CALL是分析一款游戏功能的主要突破口，但是很多游戏都是线程发包，需要跳出线程才能得到明文CALL的位置。以往的条线程方式都是在包内</description>
    </item>
    
  </channel>
</rss>
