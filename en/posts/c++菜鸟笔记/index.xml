<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43;菜鸟笔记 on Hmily云笔记</title>
    <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in C&#43;&#43;菜鸟笔记 on Hmily云笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>xinqinew@163.com (辛琪)</managingEditor>
    <webMaster>xinqinew@163.com (辛琪)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 07 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://xinqinew.github.io/en/posts/c++%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43; 笔记40STL 教程</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B040stl-%E6%95%99%E7%A8%8B/</link>
      <pubDate>Sun, 26 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B040stl-%E6%95%99%E7%A8%8B/</guid>
      <description>C++ STL 教程 在前面的章节中，我们已经学习了 C++ 模板的概念。C++ STL（标准模板库）是一套功能强大的 C++ 模板类，提供了通用的模板类和函数，这些模板类</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 笔记41标准库</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B041%E6%A0%87%E5%87%86%E5%BA%93/</link>
      <pubDate>Sun, 26 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B041%E6%A0%87%E5%87%86%E5%BA%93/</guid>
      <description>C++ 标准库 C++ 标准库可以分为两部分： 标准函数库： 这个库是由通用的、独立的、不属于任何类的函数组成的。函数库继承自 C 语言。 面向对象类库： 这个库是类</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 笔记36预处理器</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B036%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/</link>
      <pubDate>Thu, 23 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B036%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/</guid>
      <description>C++ 预处理器 C++ 还支持很多预处理指令，比如 #include、#define、#if、#else、#line 等，让我们一起看看这些重要指令。 #define 预处</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 笔记37信号处理</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B037%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/</link>
      <pubDate>Thu, 23 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B037%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/</guid>
      <description>C++ 信号处理 信号是由操作系统传给进程的中断，会提早终止一个程序。在 UNIX、LINUX、Mac OS X 或 Windows 系统上，可以通过按 Ctrl+C 产生中断。 有些信号不</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 笔记38多线程</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B038%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Thu, 23 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B038%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <description>C++ 多线程 多线程是多任务处理的一种特殊形式，多任务处理允许让电脑同时运行两个或两个以上的程序。一般情况下，两种类型的多任务处理：基于进程和基于</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 笔记39Web 编程</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B039web-%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Thu, 23 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B039web-%E7%BC%96%E7%A8%8B/</guid>
      <description>C++ Web 编程 什么是 CGI？ 公共网关接口（CGI），是一套标准，定义了信息是如何在 Web 服务器和客户端脚本之间进行交换的。 CGI 规范目前是由 NCSA 维护的，NC</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 笔记33动态内存</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B033%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98/</link>
      <pubDate>Mon, 20 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B033%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98/</guid>
      <description>C++ 动态内存 C++ 程序中的内存分为两个部分： **栈：**在函数内部声明的所有变量都将占用栈内存。 **堆：**这是程序中未使用的内存，在程序运行时可</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 笔记34命名空间</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B034%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</link>
      <pubDate>Mon, 20 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B034%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</guid>
      <description>C++ 命名空间 定义命名空间 命名空间的定义使用关键字 namespace，后跟命名空间的名称，如下所示： 1 2 3 namespace namespace_name { // 代码声明 } 为了调用带有命名空间</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 笔记35模板</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B035%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Mon, 20 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B035%E6%A8%A1%E6%9D%BF/</guid>
      <description>C++ 模板 模板是泛型编程的基础，泛型编程即以一种独立于任何特定类型的方式编写代码。 模板是创建泛型类或函数的蓝图或公式。库容器，比如迭代器和算法，</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 笔记32异常处理</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B032%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
      <pubDate>Fri, 17 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B032%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
      <description>C++ 异常处理 C++ 异常处理涉及到三个关键字：try、catch、throw。 throw: 当问题出现时，程序会抛出一个异常。这是通过使用 throw 关键字来完成的。 catch: 在</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 笔记31文件和流</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B031%E6%96%87%E4%BB%B6%E5%92%8C%E6%B5%81/</link>
      <pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B031%E6%96%87%E4%BB%B6%E5%92%8C%E6%B5%81/</guid>
      <description>C++ 文件和流 数据类型 描述 ofstream 该数据类型表示输出文件流，用于创建文件并向文件写入信息。 ifstream 该数据类型表示输入文件流，用于从文件读取信息。 fstream 该数据类型</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 笔记28数据抽象</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B028%E6%95%B0%E6%8D%AE%E6%8A%BD%E8%B1%A1/</link>
      <pubDate>Sat, 11 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B028%E6%95%B0%E6%8D%AE%E6%8A%BD%E8%B1%A1/</guid>
      <description>C++ 数据抽象 数据抽象是指，只向外界提供关键信息，并隐藏其后台的实现细节，即只表现必要的信息而不呈现细节。 就 C++ 编程而言，C++ 类为数据抽象提供了</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 笔记29数据封装</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B029%E6%95%B0%E6%8D%AE%E5%B0%81%E8%A3%85/</link>
      <pubDate>Sat, 11 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B029%E6%95%B0%E6%8D%AE%E5%B0%81%E8%A3%85/</guid>
      <description>C++ 数据封装 所有的 C++ 程序都有以下两个基本要素： **程序语句（代码）：**这是程序中执行动作的部分，它们被称为函数。 **程序数据：**数据是程序</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 笔记30接口（抽象类）</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B030%E6%8E%A5%E5%8F%A3%E6%8A%BD%E8%B1%A1%E7%B1%BB/</link>
      <pubDate>Sat, 11 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B030%E6%8E%A5%E5%8F%A3%E6%8A%BD%E8%B1%A1%E7%B1%BB/</guid>
      <description>C++ 接口（抽象类） C++ 接口是使用抽象类来实现的，抽象类与数据抽象互不混淆，数据抽象是一个把实现细节与相关的数据分离开的概念。 如果类中至少有一个函</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 笔记27多态</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B027%E5%A4%9A%E6%80%81/</link>
      <pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B027%E5%A4%9A%E6%80%81/</guid>
      <description>C++ 多态 多态按字面的意思就是多种形态。当类之间存在层次结构，并且类之间是通过继承关联时，就会用到多态。 C++ 多态意味着调用成员函数时，会根据调用函</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 笔记25继承</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B025%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B025%E7%BB%A7%E6%89%BF/</guid>
      <description>C++ 继承 1 2 3 4 5 6 7 8 9 10 11 // 基类 class Animal { // eat() 函数 // sleep() 函数 }; //派生类 class Dog : public Animal { // bark() 函数 }; 基类 &amp;amp; 派生类 类派生列表以一个或多个基类命名，形式如</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 笔记26重载运算符和重载函数</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B026%E9%87%8D%E8%BD%BD%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E9%87%8D%E8%BD%BD%E5%87%BD%E6%95%B0/</link>
      <pubDate>Thu, 02 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B026%E9%87%8D%E8%BD%BD%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E9%87%8D%E8%BD%BD%E5%87%BD%E6%95%B0/</guid>
      <description>C++ 重载运算符和重载函数 C++ 中的函数重载 同名函数 print() 被用于输出不同的数据类型： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 笔记24类 &amp; 对象</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B024%E7%B1%BB-%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B024%E7%B1%BB-%E5%AF%B9%E8%B1%A1/</guid>
      <description>C++ 类 &amp;amp; 对象 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 #include &amp;lt;iostream&amp;gt; using namespace std; class Box</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 笔记19-20指针 &amp; 引用</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B019-20%E6%8C%87%E9%92%88-%E5%BC%95%E7%94%A8/</link>
      <pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B019-20%E6%8C%87%E9%92%88-%E5%BC%95%E7%94%A8/</guid>
      <description>C++ 指针 概念 描述 C++ Null 指针 C++ 支持空指针。NULL 指针是一个定义在标准库中的值为零的常量。 C++ 指针的算术运算 可以对指针进行四种算术运算：++、&amp;nd</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 笔记21日期 &amp; 时间</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B021%E6%97%A5%E6%9C%9F-%E6%97%B6%E9%97%B4/</link>
      <pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B021%E6%97%A5%E6%9C%9F-%E6%97%B6%E9%97%B4/</guid>
      <description>C++ 日期 &amp;amp; 时间 有四个与时间相关的类型：clock_t、time_t、size_t 和 tm。类型 clock_t、size_t 和 time_t 能够把系统时间和日</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 笔记22基本的输入输出</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B022%E5%9F%BA%E6%9C%AC%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</link>
      <pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B022%E5%9F%BA%E6%9C%AC%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</guid>
      <description>C++ 基本的输入输出 I/O 库头文件 下列的头文件在 C++ 编程中很重要。 头文件 函数和描述 &amp;lt;iostream&amp;gt; 该文件定义了 cin、cout、cerr 和 clog 对象，分别对应于标准输入</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 笔记23数据结构</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B023%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B023%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>C++ 数据结构 定义结构 1 2 3 4 5 6 7 struct type_name { member_type1 member_name1; member_type2 member_name2; member_type3 member_name3; . . } object_names; 访问结构成员 使用成员访问运算符（.） 结构作为函数参数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 笔记15-16函数 &amp; 数字</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B015-16%E5%87%BD%E6%95%B0-%E6%95%B0%E5%AD%97/</link>
      <pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B015-16%E5%87%BD%E6%95%B0-%E6%95%B0%E5%AD%97/</guid>
      <description>C++ 函数 定义函数 C++ 中的函数定义的一般形式如下： 1 2 3 4 return_type function_name( parameter list ) { body of the function } 函数参数 调用类型 描述 传值调用 该方法把参数的实际值赋值给函数的形式参</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 笔记17-18数组 &amp; 字符串</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B017-18%E6%95%B0%E7%BB%84-%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B017-18%E6%95%B0%E7%BB%84-%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>C++ 数组 概念 描述 多维数组 C++ 支持多维数组。多维数组最简单的形式是二维数组。 指向数组的指针 您可以通过指定不带索引的数组名称来生成一个指向数组中第一</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 笔记13-14循环 &amp; 判断</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B013-14%E5%BE%AA%E7%8E%AF-%E5%88%A4%E6%96%AD/</link>
      <pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B013-14%E5%BE%AA%E7%8E%AF-%E5%88%A4%E6%96%AD/</guid>
      <description>C++ 循环 循环类型 循环类型 描述 while 循环 当给定条件为真时，重复语句或语句组。它会在执行循环主体之前测试条件。 for 循环 多次执行一个语句序列，简化管理循环</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 笔记11-12存储类 &amp; 运算符</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B011-12%E5%AD%98%E5%82%A8%E7%B1%BB-%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B011-12%E5%AD%98%E5%82%A8%E7%B1%BB-%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>C++ 存储类 存储类定义 C++ 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。下面列出 C++ 程序中可用的存储类： auto register static extern</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 笔记01-10基础</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B001-10%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 07 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/c&#43;&#43;-%E7%AC%94%E8%AE%B001-10%E5%9F%BA%E7%A1%80/</guid>
      <description>C++类与对象 CEdit类 为Edit控件关联变量 CString类 CString 成员函数用法 // CStringA，CStringW CString::GetBuffer //获取字符串地址 cha</description>
    </item>
    
  </channel>
</rss>
