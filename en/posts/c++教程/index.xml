<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43;菜鸟教程 on Hmily云笔记</title>
    <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/</link>
    <description>Recent content in C&#43;&#43;菜鸟教程 on Hmily云笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>xinqinew@163.com (辛琪)</managingEditor>
    <webMaster>xinqinew@163.com (辛琪)</webMaster>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 13 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://xinqinew.github.io/en/posts/c++%E6%95%99%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43; 31文件和流</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-31%E6%96%87%E4%BB%B6%E5%92%8C%E6%B5%81/</link>
      <pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-31%E6%96%87%E4%BB%B6%E5%92%8C%E6%B5%81/</guid>
      <description>C++ 文件和流 到目前为止，我们已经使用了 iostream 标准库，它提供了 cin 和 cout 方法分别用于从标准输入读取流和向标准输出写入流。 本教程介绍如何从文件读取流和向文</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 32异常处理</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-32%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-32%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
      <description>C++ 异常处理 异常是程序在执行期间产生的问题。C++ 异常是指在程序运行时发生的特殊情况，比如尝试除以零的操作。 异常提供了一种转移程序控制权的方式</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 33动态内存</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-33%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98/</link>
      <pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-33%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98/</guid>
      <description>C++ 动态内存 了解动态内存在 C++ 中是如何工作的是成为一名合格的 C++ 程序员必不可少的。C++ 程序中的内存分为两个部分： **栈：**在函数内部声明的所有</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 34命名空间</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-34%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</link>
      <pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-34%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</guid>
      <description>C++ 命名空间 假设这样一种情况，当一个班上有两个名叫 Zara 的学生时，为了明确区分它们，我们在使用名字之外，不得不使用一些额外的信息，比如他们的家庭住</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 35模板</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-35%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-35%E6%A8%A1%E6%9D%BF/</guid>
      <description>C++ 模板 模板是泛型编程的基础，泛型编程即以一种独立于任何特定类型的方式编写代码。 模板是创建泛型类或函数的蓝图或公式。库容器，比如迭代器和算法，</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 36预处理器</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-36%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/</link>
      <pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-36%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/</guid>
      <description>C++ 预处理器 预处理器是一些指令，指示编译器在实际编译之前所需完成的预处理。 所有的预处理器指令都是以井号（#）开头，只有空格字符可以出现在预处理</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 37信号处理</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-37%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-37%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/</guid>
      <description>C++ 信号处理 信号是由操作系统传给进程的中断，会提早终止一个程序。在 UNIX、LINUX、Mac OS X 或 Windows 系统上，可以通过按 Ctrl+C 产生中断。 有些信号不</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 38多线程</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-38%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-38%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <description>C++ 多线程 多线程是多任务处理的一种特殊形式，多任务处理允许让电脑同时运行两个或两个以上的程序。一般情况下，两种类型的多任务处理：基于进程和基于</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 39Web 编程</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-39web-%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-39web-%E7%BC%96%E7%A8%8B/</guid>
      <description>C++ Web 编程 什么是 CGI？ 公共网关接口（CGI），是一套标准，定义了信息是如何在 Web 服务器和客户端脚本之间进行交换的。 CGI 规范目前是由 NCSA 维护的，NC</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 40STL 教程</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-40stl-%E6%95%99%E7%A8%8B/</link>
      <pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-40stl-%E6%95%99%E7%A8%8B/</guid>
      <description>C++ STL 教程 在前面的章节中，我们已经学习了 C++ 模板的概念。C++ STL（标准模板库）是一套功能强大的 C++ 模板类，提供了通用的模板类和函数，这些模板类</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 41标准库</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-41%E6%A0%87%E5%87%86%E5%BA%93/</link>
      <pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-41%E6%A0%87%E5%87%86%E5%BA%93/</guid>
      <description>C++ 标准库 C++ 标准库可以分为两部分： 标准函数库： 这个库是由通用的、独立的、不属于任何类的函数组成的。函数库继承自 C 语言。 面向对象类库： 这个库是类</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 42有用的资源</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-42%E6%9C%89%E7%94%A8%E7%9A%84%E8%B5%84%E6%BA%90/</link>
      <pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-42%E6%9C%89%E7%94%A8%E7%9A%84%E8%B5%84%E6%BA%90/</guid>
      <description>C++ 有用的资源 以下资源包含了 C++ 有关的网站、书籍和文章。请使用它们来进一步学习 C++ 的知识。 C++ 有用的网站 C++ Standard Library headers − C++ 标准库。 C++ Programming − 这本书涵盖了 C++ 语言</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 43实例</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-43%E5%AE%9E%E4%BE%8B/</link>
      <pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-43%E5%AE%9E%E4%BE%8B/</guid>
      <description>C++ 实例 C++ 实例 - 输出 &amp;ldquo;Hello, World!&amp;rdquo; C++ 实例 - 标准输入输出 C++ 实例 - 输出换行 C++ 实例 - 实现两个数相加 C++ 实例 - 创建不同类型的变量 C++ 实例 - 求商及余数 C++ 实例 - 查看 int, float,</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 24类 &amp; 对象</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-24%E7%B1%BB-%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-24%E7%B1%BB-%E5%AF%B9%E8%B1%A1/</guid>
      <description>C++ 类 &amp;amp; 对象 C++ 在 C 语言的基础上增加了面向对象编程，C++ 支持面向对象程序设计。类是 C++ 的核心特性，通常被称为用户定义的类型。 类用于指定对象的形式</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 25继承</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-25%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-25%E7%BB%A7%E6%89%BF/</guid>
      <description>C++ 继承 面向对象程序设计中最重要的一个概念是继承。继承允许我们依据另一个类来定义一个类，这使得创建和维护一个应用程序变得更容易。这样做，也达到</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 26重载运算符和重载函数</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-26%E9%87%8D%E8%BD%BD%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E9%87%8D%E8%BD%BD%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-26%E9%87%8D%E8%BD%BD%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E9%87%8D%E8%BD%BD%E5%87%BD%E6%95%B0/</guid>
      <description>C++ 重载运算符和重载函数 C++ 允许在同一作用域中的某个函数和运算符指定多个定义，分别称为函数重载和运算符重载。 重载声明是指一个与之前已经在该作用域</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 27多态</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-27%E5%A4%9A%E6%80%81/</link>
      <pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-27%E5%A4%9A%E6%80%81/</guid>
      <description>C++ 多态 多态按字面的意思就是多种形态。当类之间存在层次结构，并且类之间是通过继承关联时，就会用到多态。 C++ 多态意味着调用成员函数时，会根据调用函</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 28数据抽象</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-28%E6%95%B0%E6%8D%AE%E6%8A%BD%E8%B1%A1/</link>
      <pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-28%E6%95%B0%E6%8D%AE%E6%8A%BD%E8%B1%A1/</guid>
      <description>C++ 数据抽象 数据抽象是指，只向外界提供关键信息，并隐藏其后台的实现细节，即只表现必要的信息而不呈现细节。 数据抽象是一种依赖于接口和实现分离的编</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 29数据封装</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-29%E6%95%B0%E6%8D%AE%E5%B0%81%E8%A3%85/</link>
      <pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-29%E6%95%B0%E6%8D%AE%E5%B0%81%E8%A3%85/</guid>
      <description>C++ 数据封装 所有的 C++ 程序都有以下两个基本要素： **程序语句（代码）：**这是程序中执行动作的部分，它们被称为函数。 **程序数据：**数据是程序</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 30接口（抽象类）</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-30%E6%8E%A5%E5%8F%A3%E6%8A%BD%E8%B1%A1%E7%B1%BB/</link>
      <pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-30%E6%8E%A5%E5%8F%A3%E6%8A%BD%E8%B1%A1%E7%B1%BB/</guid>
      <description>C++ 接口（抽象类） 接口描述了类的行为和功能，而不需要完成类的特定实现。 C++ 接口是使用抽象类来实现的，抽象类与数据抽象互不混淆，数据抽象是一个把实</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 19指针</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-19%E6%8C%87%E9%92%88/</link>
      <pubDate>Fri, 20 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-19%E6%8C%87%E9%92%88/</guid>
      <description>C++ 指针 学习 C++ 的指针既简单又有趣。通过指针，可以简化一些 C++ 编程任务的执行，还有一些任务，如动态内存分配，没有指针是无法执行的。所以，想要成为一</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 20引用</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-20%E5%BC%95%E7%94%A8/</link>
      <pubDate>Fri, 20 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-20%E5%BC%95%E7%94%A8/</guid>
      <description>C++ 引用 引用变量是一个别名，也就是说，它是某个已存在变量的另一个名字。一旦把引用初始化为某个变量，就可以使用该引用名称或变量名称来指向变量。 C++</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 21日期 &amp; 时间</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-21%E6%97%A5%E6%9C%9F-%E6%97%B6%E9%97%B4/</link>
      <pubDate>Fri, 20 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-21%E6%97%A5%E6%9C%9F-%E6%97%B6%E9%97%B4/</guid>
      <description>C++ 日期 &amp;amp; 时间 C++ 标准库没有提供所谓的日期类型。C++ 继承了 C 语言用于日期和时间操作的结构和函数。为了使用日期和时间相关的函数和结构，需要在 C++ 程</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 22基本的输入输出</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-22%E5%9F%BA%E6%9C%AC%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</link>
      <pubDate>Fri, 20 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-22%E5%9F%BA%E6%9C%AC%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</guid>
      <description>C++ 基本的输入输出 C++ 标准库提供了一组丰富的输入/输出功能，我们将在后续的章节进行介绍。本章将讨论 C++ 编程中最基本和最常见的 I/O 操作。 C++ 的 I/O 发生在流</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 23数据结构</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-23%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Fri, 20 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-23%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>C++ 数据结构 C/C++ 数组允许定义可存储相同类型数据项的变量，但是结构是 C++ 中另一种用户自定义的可用的数据类型，它允许您存储不同类型的数据项。 结构用于表</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 12a自增自减运算符</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-12a%E8%87%AA%E5%A2%9E%E8%87%AA%E5%87%8F%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-12a%E8%87%AA%E5%A2%9E%E8%87%AA%E5%87%8F%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>C++ 自增自减运算符 C++ 运算符 自增运算符 ++ 会把操作数加 1，自减运算符 &amp;ndash; 会把操作数减 1。因此： 1 2 3 4 5 x = x+1; 等同于 x++; 同样的： 1 2 3 4 5 x = x-1; 等同于</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 12b杂项运算符</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-12b%E6%9D%82%E9%A1%B9%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-12b%E6%9D%82%E9%A1%B9%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>C++ 杂项运算符 C++ 运算符 C++ sizeof 运算符 sizeof 是一个关键字，它是一个编译时运算符，用于判断变量或数据类型的字节大小。 sizeof 运算符可用于获取类、结构、共用体和其</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 18字符串</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-18%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-18%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>C++ 字符串 C++ 提供了以下两种类型的字符串表示形式： C 风格字符串 C++ 引入的 string 类类型 C 风格字符串 C 风格的字符串起源于 C 语言，并在 C++ 中继续得到支持。字符</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 08变量作用域</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-08%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/</link>
      <pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-08%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid>
      <description>C++ 变量作用域 作用域是程序的一个区域，一般来说有三个地方可以定义变量： 在函数或一个代码块内部声明的变量，称为局部变量。 在函数参数的定义中声明的</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 11存储类</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-11%E5%AD%98%E5%82%A8%E7%B1%BB/</link>
      <pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-11%E5%AD%98%E5%82%A8%E7%B1%BB/</guid>
      <description>C++ 存储类 存储类定义 C++ 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。下面列出 C++ 程序中可用的存储类： auto register static extern</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 12运算符</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-12%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-12%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>C++ 运算符 运算符是一种告诉编译器执行特定的数学或逻辑操作的符号。C++ 内置了丰富的运算符，并提供了以下类型的运算符： 算术运算符 关系运算符 逻辑运</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 13循环</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-13%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-13%E5%BE%AA%E7%8E%AF/</guid>
      <description>C++ 循环 有的时候，可能需要多次执行同一块代码。一般情况下，语句是顺序执行的：函数中的第一个语句先执行，接着是第二个语句，依此类推。 编程语言提供</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 14判断</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-14%E5%88%A4%E6%96%AD/</link>
      <pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-14%E5%88%A4%E6%96%AD/</guid>
      <description>C++ 判断 判断结构要求程序员指定一个或多个要评估或测试的条件，以及条件为真时要执行的语句（必需的）和条件为假时要执行的语句（可选的）。 下面是大多</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 15函数</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-15%E5%87%BD%E6%95%B0/</link>
      <pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-15%E5%87%BD%E6%95%B0/</guid>
      <description>C++ 函数 函数是一组一起执行一个任务的语句。每个 C++ 程序都至少有一个函数，即主函数 main() ，所有简单的程序都可以定义其他额外的函数。 您可以把代码划分到不</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 16数字</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-16%E6%95%B0%E5%AD%97/</link>
      <pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-16%E6%95%B0%E5%AD%97/</guid>
      <description>C++ 数字 通常，当我们需要用到数字时，我们会使用原始的数据类型，如 int、short、long、float 和 double 等等。这些用于数字的数据类型，其可</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 17数组</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-17%E6%95%B0%E7%BB%84/</link>
      <pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-17%E6%95%B0%E7%BB%84/</guid>
      <description>C++ 数组 C++ 支持数组数据结构，它可以存储一个固定大小的相同类型元素的顺序集合。数组是用来存储一系列数据，但它往往被认为是一系列相同类型的变量。 数</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 07变量类型</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-07%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 16 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-07%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/</guid>
      <description>C++ 变量类型 变量其实只不过是程序可操作的存储区的名称。C++ 中每个变量都有指定的类型，类型决定了变量存储的大小和布局，该范围内的值都可以存储在</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 06数据类型</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-06%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-06%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>C++ 数据类型 使用编程语言进行编程时，需要用到各种变量来存储各种信息。变量保留的是它所存储的值的内存位置。这意味着，当您创建一个变量时，就会在内</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 09常量</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-09%E5%B8%B8%E9%87%8F/</link>
      <pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-09%E5%B8%B8%E9%87%8F/</guid>
      <description>C++ 常量 常量是固定值，在程序执行期间不会改变。这些固定的值，又叫做字面量。 常量可以是任何的基本数据类型，可分为整型数字、浮点数字、字符、字符串</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 10修饰符类型</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-10%E4%BF%AE%E9%A5%B0%E7%AC%A6%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-10%E4%BF%AE%E9%A5%B0%E7%AC%A6%E7%B1%BB%E5%9E%8B/</guid>
      <description>C++ 修饰符类型 C++ 允许在 char、int 和 double 数据类型前放置修饰符。修饰符用于改变基本类型的含义，所以它更能满足各种情境的需求。 下面列出了数据类型</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 01教程</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-01%E6%95%99%E7%A8%8B/</link>
      <pubDate>Sun, 08 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-01%E6%95%99%E7%A8%8B/</guid>
      <description>C++ 教程 C++ 是一种中级语言，它是由 Bjarne Stroustrup 于 1979 年在贝尔实验室开始设计开发的。C++ 进一步扩充和完善了 C 语言，是一种面向对象的程序设计语言。C++ 可运</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 02简介</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-02%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sun, 08 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-02%E7%AE%80%E4%BB%8B/</guid>
      <description>C++ 简介 C++ 是一种静态类型的、编译式的、通用的、大小写敏感的、不规则的编程语言，支持过程化编程、面向对象编程和泛型编程。 C++ 被认为是一种中级语言，</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 03环境设置</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-03%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Sun, 08 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-03%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/</guid>
      <description>C++ 环境设置 本地环境设置 如果您想要设置 C++ 语言环境，您需要确保电脑上有以下两款可用的软件，文本编辑器和 C++ 编译器。 文本编辑器 这将用于输入您的程序。</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 04基本语法</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-04%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sun, 08 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-04%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      <description>C++ 基本语法 C++ 程序可以定义为对象的集合，这些对象通过调用彼此的方法进行交互。现在让我们简要地看一下什么是类、对象，方法、即时变量。 对象 - 对象具</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 05注释</title>
      <link>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-05%E6%B3%A8%E9%87%8A/</link>
      <pubDate>Sun, 08 Aug 2021 00:00:00 +0000</pubDate>
      <author>xinqinew@163.com (辛琪)</author>
      <guid>https://xinqinew.github.io/en/posts/c&#43;&#43;%E6%95%99%E7%A8%8B/c&#43;&#43;-05%E6%B3%A8%E9%87%8A/</guid>
      <description>C++ 注释 程序的注释是解释性语句，您可以在 C++ 代码中包含注释，这将提高源代码的可读性。所有的编程语言都允许某种形式的注释。 C++ 支持单行注释和多行注释</description>
    </item>
    
  </channel>
</rss>
