<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on 我的Eureka主题博客</title>
    <link>/docs/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on 我的Eureka主题博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; 2021 &lt;a href=&#34;https://www.wangchucheng.com/&#34;&gt;C. Wang&lt;/a&gt; and &lt;a href=&#34;https://www.ruiqima.com/&#34;&gt;R. Ma&lt;/a&gt;
</copyright>
    <lastBuildDate>Fri, 16 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="/docs/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>&lt;&gt;尖括号</title>
      <link>/docs/c&#43;&#43;/-%E5%B0%96%E6%8B%AC%E5%8F%B7/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/docs/c&#43;&#43;/-%E5%B0%96%E6%8B%AC%E5%8F%B7/</guid>
      <description>&amp;lt; &amp;gt;尖括号 我习惯将尖括号用于指定类型，作为参数: vector&amp;lt;int&amp;gt; vecOfInts ; 但是在rapidjson中，有这样的代码: document.Parse&amp;lt;0&amp;gt;(json) ; document.Parse方法的签名是: template</description>
    </item>
    
    <item>
      <title>C&#43;&#43;关键字</title>
      <link>/docs/c&#43;&#43;/%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/docs/c&#43;&#43;/%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <description>C++关键字 1. asm asm (指令字符串)：允许在 C++ 程序中嵌入汇编代码。 2. auto auto（自动，automatic）是存储类型标识符，表明变量&amp;quot;自动&amp;qu</description>
    </item>
    
    <item>
      <title>cin和cout输入输出</title>
      <link>/docs/c&#43;&#43;/cin%E5%92%8Ccout%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/docs/c&#43;&#43;/cin%E5%92%8Ccout%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</guid>
      <description>cin和cout输入输出 简单的输入输出代码示例： #include&amp;lt;iostream&amp;gt; using namespace std; int main(){ int x; float y; cout&amp;lt;&amp;lt;&amp;quot;Please input an int number:&amp;quot;&amp;lt;&amp;lt;endl; cin&amp;gt;&amp;gt;x; cout&amp;lt;&amp;lt;&amp;quot;The int number is x= &amp;quot;&amp;lt;&amp;lt;x&amp;lt;&amp;lt;endl; cout&amp;lt;&amp;lt;&amp;quot;Please input a float number:&amp;quot;&amp;lt;&amp;lt;endl; cin&amp;gt;&amp;gt;y; cout&amp;lt;&amp;lt;&amp;quot;The float number is y= &amp;quot;&amp;lt;&amp;lt;y&amp;lt;&amp;lt;endl; return 0; } 运行结果如下（↙表示按下回车</description>
    </item>
    
    <item>
      <title>class 类</title>
      <link>/docs/c&#43;&#43;/class%E7%B1%BB/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/docs/c&#43;&#43;/class%E7%B1%BB/</guid>
      <description>class 类 #include &amp;lt;stdio.h&amp;gt; //通过class关键字类定义类 class Student{ public: //类包含的变量 char *name; int age; float score; //类包含的函数 void say(){ printf(&amp;quot;%s的年龄是 %d，成绩是 %f\n&amp;quot;, name, age,</description>
    </item>
    
    <item>
      <title>ifndef详解</title>
      <link>/docs/c&#43;&#43;/ifndef%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/docs/c&#43;&#43;/ifndef%E8%AF%A6%E8%A7%A3/</guid>
      <description>ifndef详解 ifndef是&amp;quot;if not defined&amp;quot;的简写 #ifndef起到的效果是防止一个源文件多次包含同一个头文件, 而不是防</description>
    </item>
    
    <item>
      <title>namespace 命名空间</title>
      <link>/docs/c&#43;&#43;/namespace%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/docs/c&#43;&#43;/namespace%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</guid>
      <description>namespace 命名空间 namespace 是C++中的关键字，用来定义一个命名空间，语法格式为： namespace name{ //variables, functions, classes } name是命名空间的名字，它里面可以包含变量、函数、类、typedef、</description>
    </item>
    
    <item>
      <title>printf输出</title>
      <link>/docs/c&#43;&#43;/printf%E8%BE%93%E5%87%BA/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/docs/c&#43;&#43;/printf%E8%BE%93%E5%87%BA/</guid>
      <description>printf输出 函式原型： int printf ( const char * format, &amp;hellip; ); 引數說明： %[flags][width][.precision][length]specifier %[旗標][寬度][.精度][長度修飾]資料型態 1. 資料型態 ( %[旗標][寬度][.精度][長度</description>
    </item>
    
    <item>
      <title>std命名空间</title>
      <link>/docs/c&#43;&#43;/std%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/docs/c&#43;&#43;/std%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</guid>
      <description>std命名空间 使用命名空间 std： #include &amp;lt;cstdio&amp;gt; int main(){ std::printf(&amp;quot;http://c.biancheng.net\n&amp;quot;); return 0; } 不使用命名空间 std： #include &amp;lt;cstdio&amp;gt; int main(){ printf(&amp;quot;http://c.biancheng.net\n&amp;quot;); return 0; } 演示了如何使用 C++ 库进行输入输出： #include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; int main(){ //声明命名空间s</description>
    </item>
    
    <item>
      <title>struct 结构体</title>
      <link>/docs/c&#43;&#43;/struct%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/docs/c&#43;&#43;/struct%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>struct 结构体 #include &amp;lt;stdio.h&amp;gt; //定义结构体 Student struct Student{ //结构体包含的成员变量 char *name; int age; float score; }; //显示结构体的成员变量 void display(struct Student stu){ printf(&amp;quot;%s的年龄是 %d，成绩</description>
    </item>
    
    <item>
      <title>typedef起小名</title>
      <link>/docs/c&#43;&#43;/typedef%E8%B5%B7%E5%B0%8F%E5%90%8D/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/docs/c&#43;&#43;/typedef%E8%B5%B7%E5%B0%8F%E5%90%8D/</guid>
      <description>typedef起小名 C 语言提供了 typedef 关键字，您可以使用它来为类型取一个新的名字。下面的实例为单字节数字定义了一个术语 BYTE： typedef unsigned char BYTE; 在这个类型定义之后</description>
    </item>
    
    <item>
      <title>字符的输入与输出</title>
      <link>/docs/c&#43;&#43;/%E5%AD%97%E7%AC%A6%E7%9A%84%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/docs/c&#43;&#43;/%E5%AD%97%E7%AC%A6%E7%9A%84%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/</guid>
      <description>字符的输入与输出 \b 退格 \f 走纸换页 \r 回车 \t 横向跳格(ctrl-i) 格式化字符 %c 字符 %d 十进制整数 %s 字符串 %S or %ws 宽字符串 %x 十六进制整数 %p 指针或地址 %o 八进制整</description>
    </item>
    
    <item>
      <title>常用API函数</title>
      <link>/docs/c&#43;&#43;/%E5%B8%B8%E7%94%A8api%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/docs/c&#43;&#43;/%E5%B8%B8%E7%94%A8api%E5%87%BD%E6%95%B0/</guid>
      <description>常用API函数 模拟鼠标 LRESULT SendMessage(HWND hWnd，UINT Msg，WPARAM wParam，LPARAM IParam); 其中Msg可以为WM_LBUTTONDOWN或WM_LBU</description>
    </item>
    
    <item>
      <title>常用头文件</title>
      <link>/docs/c&#43;&#43;/%E5%B8%B8%E7%94%A8%E5%A4%B4%E6%96%87%E4%BB%B6/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/docs/c&#43;&#43;/%E5%B8%B8%E7%94%A8%E5%A4%B4%E6%96%87%E4%BB%B6/</guid>
      <description>常用头文件 stdafx.h MFC预编译 stdio.h 输入输出 process.h 进程 stdlib.h 声明了数值与字符串转换函数, 伪随机数 生成函数, 动态内存分配函数, 进程控制函数等公共函数 Windows.h windows系统函</description>
    </item>
    
    <item>
      <title>指针读写内存</title>
      <link>/docs/c&#43;&#43;/%E6%8C%87%E9%92%88%E8%AF%BB%E5%86%99%E5%86%85%E5%AD%98/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/docs/c&#43;&#43;/%E6%8C%87%E9%92%88%E8%AF%BB%E5%86%99%E5%86%85%E5%AD%98/</guid>
      <description>指针读写内存 #include &amp;lt;cstdio&amp;gt; #define BASE 0x00417000 int g_a = 111; //0x00417000 int g_b = 222; //0x00417004 int g_c = 333; //0x00417008 typedef struct T3 { int a1; //偏移0 int a2; //偏移4 int a3; //偏移8 }TYPE3; int main(int argc, char const *argv[]) { //指针读内存 int* p1=(int*)0x00417000; printf(&amp;quot;A:%d,%d,%d \n&amp;quot;,g_a,g_b,g_c ); //A:111,222,333 printf(&amp;quot;B:%d,%d,%d \n&amp;quot;,*(p1+0),*(p1+1),*(p1+2)); //B:111,222,333</description>
    </item>
    
    <item>
      <title>知识点</title>
      <link>/docs/c&#43;&#43;/%E7%9F%A5%E8%AF%86%E7%82%B9/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>/docs/c&#43;&#43;/%E7%9F%A5%E8%AF%86%E7%82%B9/</guid>
      <description>知识点 阻断函数 getchar() //等待键盘输入回车 sysem(&amp;quot;pause&amp;quot;)//任意键继续 常用函数 printf(&amp;quot;Hello World!&amp;quot;) //输出函数 atoi(arg) //字符串转整数 Sleep(arg) //等待</description>
    </item>
    
    <item>
      <title></title>
      <link>/docs/c&#43;&#43;/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/c&#43;&#43;/readme/</guid>
      <description>NOTE 这里收录了我的C++笔记. {% include list.liquid all=true %}</description>
    </item>
    
  </channel>
</rss>
