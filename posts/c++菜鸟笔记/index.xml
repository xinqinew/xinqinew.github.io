<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有C&#43;&#43;菜鸟笔记 - Hmily云笔记</title>
        <link>https://xinqinew.github.io/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/</link>
        <description>所有C&#43;&#43;菜鸟笔记 | Hmily云笔记</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>xinqinew@163.com (辛琪)</managingEditor>
            <webMaster>xinqinew@163.com (辛琪)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 07 Aug 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://xinqinew.github.io/posts/c&#43;&#43;%E8%8F%9C%E9%B8%9F%E7%AC%94%E8%AE%B0/" rel="self" type="application/rss+xml" /><item>
    <title>C&#43;&#43; 笔记36预处理器</title>
    <link>https://xinqinew.github.io/2021/09/c-%E7%AC%94%E8%AE%B036%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/</link>
    <pubDate>Thu, 23 Sep 2021 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2021/09/c-%E7%AC%94%E8%AE%B036%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/runoob.png" referrerpolicy="no-referrer">
            </div>C++ 预处理器 C++ 还支持很多预处理指令，比如 #include、#define、#if、#else、#line 等，让我们一起看看这些重要指令。 #define 预处]]></description>
</item><item>
    <title>C&#43;&#43; 笔记37信号处理</title>
    <link>https://xinqinew.github.io/2021/09/c-%E7%AC%94%E8%AE%B037%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/</link>
    <pubDate>Thu, 23 Sep 2021 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2021/09/c-%E7%AC%94%E8%AE%B037%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/runoob.png" referrerpolicy="no-referrer">
            </div>C++ 信号处理 信号是由操作系统传给进程的中断，会提早终止一个程序。在 UNIX、LINUX、Mac OS X 或 Windows 系统上，可以通过按 Ctrl+C 产生中断。 有些信号不]]></description>
</item><item>
    <title>C&#43;&#43; 笔记38多线程</title>
    <link>https://xinqinew.github.io/2021/09/c-%E7%AC%94%E8%AE%B038%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
    <pubDate>Thu, 23 Sep 2021 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2021/09/c-%E7%AC%94%E8%AE%B038%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/runoob.png" referrerpolicy="no-referrer">
            </div>C++ 多线程 多线程是多任务处理的一种特殊形式，多任务处理允许让电脑同时运行两个或两个以上的程序。一般情况下，两种类型的多任务处理：基于进程和基于]]></description>
</item><item>
    <title>C&#43;&#43; 笔记39Web 编程</title>
    <link>https://xinqinew.github.io/2021/09/c-%E7%AC%94%E8%AE%B039web-%E7%BC%96%E7%A8%8B/</link>
    <pubDate>Thu, 23 Sep 2021 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2021/09/c-%E7%AC%94%E8%AE%B039web-%E7%BC%96%E7%A8%8B/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/runoob.png" referrerpolicy="no-referrer">
            </div>C++ Web 编程 什么是 CGI？ 公共网关接口（CGI），是一套标准，定义了信息是如何在 Web 服务器和客户端脚本之间进行交换的。 CGI 规范目前是由 NCSA 维护的，NC]]></description>
</item><item>
    <title>C&#43;&#43; 笔记33动态内存</title>
    <link>https://xinqinew.github.io/2021/09/c-%E7%AC%94%E8%AE%B033%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98/</link>
    <pubDate>Mon, 20 Sep 2021 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2021/09/c-%E7%AC%94%E8%AE%B033%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/runoob.png" referrerpolicy="no-referrer">
            </div>C++ 动态内存 C++ 程序中的内存分为两个部分： **栈：**在函数内部声明的所有变量都将占用栈内存。 **堆：**这是程序中未使用的内存，在程序运行时可]]></description>
</item><item>
    <title>C&#43;&#43; 笔记34命名空间</title>
    <link>https://xinqinew.github.io/2021/09/c-%E7%AC%94%E8%AE%B034%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</link>
    <pubDate>Mon, 20 Sep 2021 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2021/09/c-%E7%AC%94%E8%AE%B034%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/runoob.png" referrerpolicy="no-referrer">
            </div>C++ 命名空间 定义命名空间 命名空间的定义使用关键字 namespace，后跟命名空间的名称，如下所示： 1 2 3 namespace namespace_name { // 代码声明 } 为了调用带有命名空间]]></description>
</item><item>
    <title>C&#43;&#43; 笔记35模板</title>
    <link>https://xinqinew.github.io/2021/09/c-%E7%AC%94%E8%AE%B035%E6%A8%A1%E6%9D%BF/</link>
    <pubDate>Mon, 20 Sep 2021 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2021/09/c-%E7%AC%94%E8%AE%B035%E6%A8%A1%E6%9D%BF/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/runoob.png" referrerpolicy="no-referrer">
            </div>C++ 模板 模板是泛型编程的基础，泛型编程即以一种独立于任何特定类型的方式编写代码。 模板是创建泛型类或函数的蓝图或公式。库容器，比如迭代器和算法，]]></description>
</item><item>
    <title>C&#43;&#43; 笔记32异常处理</title>
    <link>https://xinqinew.github.io/2021/09/c-%E7%AC%94%E8%AE%B032%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
    <pubDate>Fri, 17 Sep 2021 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2021/09/c-%E7%AC%94%E8%AE%B032%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/runoob.png" referrerpolicy="no-referrer">
            </div>C++ 异常处理 C++ 异常处理涉及到三个关键字：try、catch、throw。 throw: 当问题出现时，程序会抛出一个异常。这是通过使用 throw 关键字来完成的。 catch: 在]]></description>
</item><item>
    <title>C&#43;&#43; 笔记31文件和流</title>
    <link>https://xinqinew.github.io/2021/09/c-%E7%AC%94%E8%AE%B031%E6%96%87%E4%BB%B6%E5%92%8C%E6%B5%81/</link>
    <pubDate>Mon, 13 Sep 2021 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2021/09/c-%E7%AC%94%E8%AE%B031%E6%96%87%E4%BB%B6%E5%92%8C%E6%B5%81/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/runoob.png" referrerpolicy="no-referrer">
            </div>C++ 文件和流 数据类型 描述 ofstream 该数据类型表示输出文件流，用于创建文件并向文件写入信息。 ifstream 该数据类型表示输入文件流，用于从文件读取信息。 fstream 该数据类型]]></description>
</item><item>
    <title>C&#43;&#43; 笔记28数据抽象</title>
    <link>https://xinqinew.github.io/2021/09/c-%E7%AC%94%E8%AE%B028%E6%95%B0%E6%8D%AE%E6%8A%BD%E8%B1%A1/</link>
    <pubDate>Sat, 11 Sep 2021 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2021/09/c-%E7%AC%94%E8%AE%B028%E6%95%B0%E6%8D%AE%E6%8A%BD%E8%B1%A1/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/runoob.png" referrerpolicy="no-referrer">
            </div>C++ 数据抽象 数据抽象是指，只向外界提供关键信息，并隐藏其后台的实现细节，即只表现必要的信息而不呈现细节。 就 C++ 编程而言，C++ 类为数据抽象提供了]]></description>
</item></channel>
</rss>
