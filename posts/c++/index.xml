<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有C&#43;&#43; - Hmily云笔记</title>
        <link>https://xinqinew.github.io/posts/c&#43;&#43;/</link>
        <description>所有C&#43;&#43; | Hmily云笔记</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>xinqinew@163.com (辛琪)</managingEditor>
            <webMaster>xinqinew@163.com (辛琪)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 08 Jan 2022 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://xinqinew.github.io/posts/c&#43;&#43;/" rel="self" type="application/rss+xml" /><item>
    <title>流程图 - 循环</title>
    <link>https://xinqinew.github.io/2022/01/%E6%B5%81%E7%A8%8B%E5%9B%BE-%E5%BE%AA%E7%8E%AF/</link>
    <pubDate>Sun, 16 Jan 2022 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2022/01/%E6%B5%81%E7%A8%8B%E5%9B%BE-%E5%BE%AA%E7%8E%AF/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/C&#43;&#43;.jpg" referrerpolicy="no-referrer">
            </div>for、while、do while三种循环的流程图画法总结（附案例） 循环结构是指在程序中需要反复执行某个功能而设置的一种程序结构，可以看成是]]></description>
</item><item>
    <title>ini文件读写</title>
    <link>https://xinqinew.github.io/2022/01/ini%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/</link>
    <pubDate>Thu, 13 Jan 2022 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2022/01/ini%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/C&#43;&#43;.jpg" referrerpolicy="no-referrer">
            </div>读取整型值 (返回值为从ini配置中读到的整数) 1 2 3 4 5 6 UINT GetPrivateProfileInt( LPCTSTR lpAppName, // INI文件中的一个字段名[节名]可以有很多个节名 LPCTSTR lpKeyName, // lpAppName 下的一个键名，也]]></description>
</item><item>
    <title>多线程</title>
    <link>https://xinqinew.github.io/2022/01/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
    <pubDate>Tue, 11 Jan 2022 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2022/01/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/C&#43;&#43;.jpg" referrerpolicy="no-referrer">
            </div>CreateThread 1 m_AcountManageThread = CreateThread(NULL, NULL, ThreadProc, this, 0, NULL);//创建线程 AfxBeginThread (MFC专用) 1 2 //创建线程 大漠的DMInitThread AfxBeginThread(DMInitThread, this, THREAD_PRIORITY_NORMAL, 0, 0, NULL); _beginthreadex 1 m_hThreadHandle = (HANDLE)::_beginthreadex(NULL, 0, ThreadFunction, this, 0, &amp;m_uThreadID); //]]></description>
</item><item>
    <title>C&#43;&#43; static静态成员变量</title>
    <link>https://xinqinew.github.io/2022/01/c-static%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F/</link>
    <pubDate>Sat, 08 Jan 2022 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2022/01/c-static%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/C&#43;&#43;.jpg" referrerpolicy="no-referrer">
            </div>对象的内存中包含了成员变量，不同的对象占用不同的内存，这使得不同对象的成员变量相互独立，它们的值不受其他对象的影响。例如有两个相同类型的对象]]></description>
</item><item>
    <title>CString指南</title>
    <link>https://xinqinew.github.io/2022/01/cstring%E6%8C%87%E5%8D%97/</link>
    <pubDate>Mon, 03 Jan 2022 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2022/01/cstring%E6%8C%87%E5%8D%97/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/C&#43;&#43;.jpg" referrerpolicy="no-referrer">
            </div>我用#CSDN#这个app发现了有技术含量的博客，小伙伴们求同去《CString 应用操作指南【转】》, 一起来围观吧 https://blog.csdn.net/wallwind/article/details/6599125?utm_source=app&app_version=4.21.1 这篇文章包括以下内容： CString]]></description>
</item><item>
    <title>C&#43;&#43; 调用cmd的几种方法</title>
    <link>https://xinqinew.github.io/2021/12/c-%E8%B0%83%E7%94%A8cmd%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</link>
    <pubDate>Tue, 21 Dec 2021 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2021/12/c-%E8%B0%83%E7%94%A8cmd%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/C&#43;&#43;.jpg" referrerpolicy="no-referrer">
            </div>调用cmd来执行响应的命令，windows实际上也给了一些接口，但是有些在执行某些命令的时候，却不能够执行，比如 winsat。 system 这个命令使用]]></description>
</item><item>
    <title>非常用API函数</title>
    <link>https://xinqinew.github.io/2021/12/%E9%9D%9E%E5%B8%B8%E7%94%A8api%E5%87%BD%E6%95%B0/</link>
    <pubDate>Fri, 17 Dec 2021 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2021/12/%E9%9D%9E%E5%B8%B8%E7%94%A8api%E5%87%BD%E6%95%B0/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/C&#43;&#43;.jpg" referrerpolicy="no-referrer">
            </div>PROCESSENTRY32 存放快照进程信息的结构体 头文件 #include&quot;tlhelp32.h&quot; CreateToolhelp32Snapshot函数 获取系统中正在运行的进程信息，线程信息等。 详细内容见此]]></description>
</item><item>
    <title>内存中的浮点数与CE扫四种编码</title>
    <link>https://xinqinew.github.io/2021/09/%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E6%B5%AE%E7%82%B9%E6%95%B0%E4%B8%8Ece%E6%89%AB%E5%9B%9B%E7%A7%8D%E7%BC%96%E7%A0%81/</link>
    <pubDate>Mon, 27 Sep 2021 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2021/09/%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E6%B5%AE%E7%82%B9%E6%95%B0%E4%B8%8Ece%E6%89%AB%E5%9B%9B%E7%A7%8D%E7%BC%96%E7%A0%81/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/C&#43;&#43;.jpg" referrerpolicy="no-referrer">
            </div>内存中的浮点数 3开头 1.xxxx 0.xxxx 4开头 100.xxxx b开头 -0.xxxx c开头 -15.xxxx CE扫四种编码 ASCI UNIDCOE（不勾选） UNIDCOE UNIDCOE 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 graph 勾选UNIDC]]></description>
</item><item>
    <title>在c&#43;&#43;使用and替代&amp;&amp;</title>
    <link>https://xinqinew.github.io/2021/08/%E5%9C%A8c-%E4%BD%BF%E7%94%A8and%E6%9B%BF%E4%BB%A3/</link>
    <pubDate>Tue, 24 Aug 2021 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2021/08/%E5%9C%A8c-%E4%BD%BF%E7%94%A8and%E6%9B%BF%E4%BB%A3/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/C&#43;&#43;.jpg" referrerpolicy="no-referrer">
            </div>在c++使用and替代&amp;&amp; 背景 ​ 在之前的一个项目中发现使用了 and 替代 &amp;&amp;，当时感觉很奇怪，c++有这样的用法吗]]></description>
</item><item>
    <title>输出您电脑上各种数据类型的大小</title>
    <link>https://xinqinew.github.io/2021/08/%E8%BE%93%E5%87%BA%E6%82%A8%E7%94%B5%E8%84%91%E4%B8%8A%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%A4%A7%E5%B0%8F/</link>
    <pubDate>Tue, 10 Aug 2021 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2021/08/%E8%BE%93%E5%87%BA%E6%82%A8%E7%94%B5%E8%84%91%E4%B8%8A%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%A4%A7%E5%B0%8F/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/C&#43;&#43;.jpg" referrerpolicy="no-referrer">
            </div>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 #include&lt;iostream&gt; #include &lt;limits&gt; using namespace std; int main() { cout &lt;&lt; &#34;type: \t\t&#34; &lt;&lt; &#34;************size**************&#34;&lt;&lt;]]></description>
</item></channel>
</rss>
