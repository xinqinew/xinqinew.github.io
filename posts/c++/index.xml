<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有C&#43;&#43; - Hmily云笔记</title>
        <link>https://xinqinew.github.io/posts/c&#43;&#43;/</link>
        <description>所有C&#43;&#43; | Hmily云笔记</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>xinqinew@163.com (辛琪)</managingEditor>
            <webMaster>xinqinew@163.com (辛琪)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 24 Aug 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://xinqinew.github.io/posts/c&#43;&#43;/" rel="self" type="application/rss+xml" /><item>
    <title>C&#43;&#43;知识点(十三) 重载运算符和重载函数</title>
    <link>https://xinqinew.github.io/2021/09/c-%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8D%81%E4%B8%89/</link>
    <pubDate>Thu, 02 Sep 2021 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2021/09/c-%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8D%81%E4%B8%89/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/C&#43;&#43;.jpg" referrerpolicy="no-referrer">
            </div>C++ 重载运算符和重载函数 C++ 中的函数重载 同名函数 print() 被用于输出不同的数据类型： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include]]></description>
</item><item>
    <title>C&#43;&#43;知识点(十二) 继承</title>
    <link>https://xinqinew.github.io/2021/09/c-%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8D%81%E4%BA%8C/</link>
    <pubDate>Thu, 02 Sep 2021 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2021/09/c-%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8D%81%E4%BA%8C/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/C&#43;&#43;.jpg" referrerpolicy="no-referrer">
            </div>C++ 继承 1 2 3 4 5 6 7 8 9 10 11 // 基类 class Animal { // eat() 函数 // sleep() 函数 }; //派生类 class Dog : public Animal { // bark() 函数 }; 基类 &amp; 派生类 类派生列表以一个或多个基类命名，形式如]]></description>
</item><item>
    <title>C&#43;&#43;知识点(十一) 类 &amp; 对象</title>
    <link>https://xinqinew.github.io/2021/08/c-%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8D%81%E4%B8%80/</link>
    <pubDate>Fri, 27 Aug 2021 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2021/08/c-%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8D%81%E4%B8%80/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/C&#43;&#43;.jpg" referrerpolicy="no-referrer">
            </div>C++ 类 &amp; 对象 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 #include &lt;iostream&gt; using namespace std; class Box]]></description>
</item><item>
    <title>C&#43;&#43;知识点(七) 指针与引用</title>
    <link>https://xinqinew.github.io/2021/08/c-%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%83/</link>
    <pubDate>Tue, 24 Aug 2021 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2021/08/c-%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B8%83/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/C&#43;&#43;.jpg" referrerpolicy="no-referrer">
            </div>C++ 指针 概念 描述 C++ Null 指针 C++ 支持空指针。NULL 指针是一个定义在标准库中的值为零的常量。 C++ 指针的算术运算 可以对指针进行四种算术运算：++、&nd]]></description>
</item><item>
    <title>C&#43;&#43;知识点(九) 输入输出</title>
    <link>https://xinqinew.github.io/2021/08/c-%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B9%9D/</link>
    <pubDate>Tue, 24 Aug 2021 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2021/08/c-%E7%9F%A5%E8%AF%86%E7%82%B9%E4%B9%9D/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/C&#43;&#43;.jpg" referrerpolicy="no-referrer">
            </div>C++ 基本的输入输出 I/O 库头文件 下列的头文件在 C++ 编程中很重要。 头文件 函数和描述 &lt;iostream&gt; 该文件定义了 cin、cout、cerr 和 clog 对象，分别对应于标准输入]]></description>
</item><item>
    <title>C&#43;&#43;知识点(八) 日期与时间</title>
    <link>https://xinqinew.github.io/2021/08/c-%E7%9F%A5%E8%AF%86%E7%82%B9%E5%85%AB/</link>
    <pubDate>Tue, 24 Aug 2021 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2021/08/c-%E7%9F%A5%E8%AF%86%E7%82%B9%E5%85%AB/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/C&#43;&#43;.jpg" referrerpolicy="no-referrer">
            </div>C++ 日期 &amp; 时间 有四个与时间相关的类型：clock_t、time_t、size_t 和 tm。类型 clock_t、size_t 和 time_t 能够把系统时间和日]]></description>
</item><item>
    <title>C&#43;&#43;知识点(十) 数据结构</title>
    <link>https://xinqinew.github.io/2021/08/c-%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8D%81/</link>
    <pubDate>Tue, 24 Aug 2021 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2021/08/c-%E7%9F%A5%E8%AF%86%E7%82%B9%E5%8D%81/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/C&#43;&#43;.jpg" referrerpolicy="no-referrer">
            </div>C++ 数据结构 定义结构 1 2 3 4 5 6 7 struct type_name { member_type1 member_name1; member_type2 member_name2; member_type3 member_name3; . . } object_names; 访问结构成员 使用成员访问运算符（.） 结构作为函数参数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15]]></description>
</item><item>
    <title>C&#43;&#43;知识点(五) 函数与数字</title>
    <link>https://xinqinew.github.io/2021/08/c-%E7%9F%A5%E8%AF%86%E7%82%B9%E4%BA%94/</link>
    <pubDate>Wed, 18 Aug 2021 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2021/08/c-%E7%9F%A5%E8%AF%86%E7%82%B9%E4%BA%94/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/C&#43;&#43;.jpg" referrerpolicy="no-referrer">
            </div>C++ 函数 定义函数 C++ 中的函数定义的一般形式如下： 1 2 3 4 return_type function_name( parameter list ) { body of the function } 函数参数 调用类型 描述 传值调用 该方法把参数的实际值赋值给函数的形式参]]></description>
</item><item>
    <title>C&#43;&#43;知识点(六) 数组与字符串</title>
    <link>https://xinqinew.github.io/2021/08/c-%E7%9F%A5%E8%AF%86%E7%82%B9%E5%85%AD/</link>
    <pubDate>Wed, 18 Aug 2021 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2021/08/c-%E7%9F%A5%E8%AF%86%E7%82%B9%E5%85%AD/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/C&#43;&#43;.jpg" referrerpolicy="no-referrer">
            </div>C++ 数组 概念 描述 多维数组 C++ 支持多维数组。多维数组最简单的形式是二维数组。 指向数组的指针 您可以通过指定不带索引的数组名称来生成一个指向数组中第一]]></description>
</item><item>
    <title>C&#43;&#43;知识点(四) 循环与判断</title>
    <link>https://xinqinew.github.io/2021/08/c-%E7%9F%A5%E8%AF%86%E7%82%B9%E5%9B%9B/</link>
    <pubDate>Sun, 15 Aug 2021 00:00:00 &#43;0000</pubDate><author>
        <name>辛琪</name>
    </author><guid>https://xinqinew.github.io/2021/08/c-%E7%9F%A5%E8%AF%86%E7%82%B9%E5%9B%9B/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/images/C&#43;&#43;.jpg" referrerpolicy="no-referrer">
            </div>C++ 循环 循环类型 循环类型 描述 while 循环 当给定条件为真时，重复语句或语句组。它会在执行循环主体之前测试条件。 for 循环 多次执行一个语句序列，简化管理循环]]></description>
</item></channel>
</rss>
